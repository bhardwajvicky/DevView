@using BB.Api.Endpoints.Analytics
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JS
@inherits ComponentBase

@if (IsOpen)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Commit Files</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body position-relative">
                    @if (ShowAlert)
                    {
                        <div class="alert alert-success position-absolute w-100 text-center" style="top: 0; left: 0; z-index: 1051;">
                            Database updated successfully!
                        </div>
                    }
                    @if (CommitFiles == null)
                    {
                        <p>Loading commit files...</p>
                    }
                    else if (!CommitFiles.Any())
                    {
                        <p>No files found for this commit.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover align-middle">
                                <thead>
                                    <tr>
                                        <th>File Name</th>
                                        <th>File Type</th>
                                        <th>Additions</th>
                                        <th>Deletions</th>
                                        <th>Exclude</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var file in CommitFiles)
                                    {
                                        <tr>
                                            <td>@file.FilePath</td>
                                            <td>@file.FileType</td>
                                            <td>@file.LinesAdded</td>
                                            <td>@file.LinesRemoved</td>
                                            <td>
                                                <div class="form-check form-switch">
                                                    <input class="form-check-input" type="checkbox" role="switch" id="excludeSwitch_@file.Id" checked="@file.ExcludeFromReporting" @onchange="(e) => OnExcludeFromReportingChange(file, (bool)e.Value)" />
                                                    <label class="form-check-label" for="excludeSwitch_@file.Id"></label>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public string CommitHash { get; set; } = string.Empty;

    private List<CommitFileDto>? CommitFiles { get; set; }
    private bool ShowAlert { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen)
        {
            await LoadCommitFiles();
        }
    }

    private async Task LoadCommitFiles()
    {
        try
        {
            CommitFiles = await Http.GetFromJsonAsync<List<CommitFileDto>>($"api/Analytics/commits/{CommitHash}/files");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading commit files: {ex.Message}");
            CommitFiles = new List<CommitFileDto>(); // Initialize to empty list on error
        }
    }

    private async Task OnExcludeFromReportingChange(CommitFileDto file, bool value)
    {
        try
        {
            var updateDto = new CommitFileUpdateDto
            {
                FileId = file.Id,
                PropertyName = "ExcludeFromReporting",
                Value = value
            };

            var response = await Http.PutAsJsonAsync("api/Analytics/commit-files", updateDto);
            response.EnsureSuccessStatusCode();

            // After update, reload the commit files to get the latest state from DB
            await LoadCommitFiles();

            ShowAlert = true;
            StateHasChanged();
            await Task.Delay(5000);
            ShowAlert = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating ExcludeFromReporting for file {file.FilePath}: {ex.Message}");
            // Revert the UI state if the update fails
            file.ExcludeFromReporting = !value;
        }
    }

    private async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }
} 