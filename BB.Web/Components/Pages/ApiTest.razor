@page "/api-test"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject ILogger<ApiTest> Logger

<PageTitle>API Test</PageTitle>

<h1>API Connection Test</h1>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h3>Configuration</h3>
            <p><strong>HTTP Client Base Address:</strong> @Http.BaseAddress</p>
            <p><strong>Timeout:</strong> @Http.Timeout</p>
            
            <h3>Test Results</h3>
            @if (isLoading)
            {
                <p><em>Testing API connection...</em></p>
            }
            else
            {
                <div class="alert @(testResult.Success ? "alert-success" : "alert-danger")">
                    <h5>@(testResult.Success ? "✅ Success" : "❌ Failed")</h5>
                    <p><strong>Status:</strong> @testResult.StatusCode</p>
                    <p><strong>Response Time:</strong> @testResult.ResponseTime ms</p>
                    @if (!string.IsNullOrEmpty(testResult.ErrorMessage))
                    {
                        <p><strong>Error:</strong> @testResult.ErrorMessage</p>
                    }
                    @if (!string.IsNullOrEmpty(testResult.ResponseContent))
                    {
                        <p><strong>Response:</strong></p>
                        <pre style="background-color: #f8f9fa; padding: 10px; border-radius: 4px; max-height: 200px; overflow-y: auto;">@testResult.ResponseContent</pre>
                    }
                </div>
            }
            
            <button class="btn btn-primary" @onclick="TestApiConnection" disabled="@isLoading">
                @(isLoading ? "Testing..." : "Test API Connection")
            </button>
        </div>
        
        <div class="col-md-6">
            <h3>Manual Tests</h3>
            <p>You can also test these URLs directly in your browser:</p>
            <ul>
                <li><a href="http://localhost:5000/swagger" target="_blank">API Swagger UI</a></li>
                <li><a href="http://localhost:5000/api/analytics/repositories" target="_blank">Repositories Endpoint</a></li>
            </ul>
            
            <h3>Expected Response</h3>
            <p>The repositories endpoint should return JSON like:</p>
            <pre style="background-color: #f8f9fa; padding: 10px; border-radius: 4px;">
[
  {
    "name": "repository-name",
    "slug": "repository-slug", 
    "workspace": "workspace-name"
  }
]
            </pre>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private TestResult testResult = new();
    
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("API Test page initialized");
        await TestApiConnection();
    }
    
    private async Task TestApiConnection()
    {
        isLoading = true;
        testResult = new TestResult();
        StateHasChanged();
        
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();
        
        try
        {
            Logger.LogInformation("Testing API connection to: {BaseAddress}", Http.BaseAddress);
            
            var response = await Http.GetAsync("api/analytics/repositories");
            stopwatch.Stop();
            
            testResult.StatusCode = response.StatusCode.ToString();
            testResult.ResponseTime = stopwatch.ElapsedMilliseconds;
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                testResult.Success = true;
                testResult.ResponseContent = content;
                
                Logger.LogInformation("API test successful. Status: {StatusCode}, Content: {Content}", 
                    response.StatusCode, content);
            }
            else
            {
                testResult.Success = false;
                testResult.ErrorMessage = $"HTTP {response.StatusCode}: {response.ReasonPhrase}";
                testResult.ResponseContent = await response.Content.ReadAsStringAsync();
                
                Logger.LogWarning("API test failed. Status: {StatusCode}, Reason: {ReasonPhrase}", 
                    response.StatusCode, response.ReasonPhrase);
            }
        }
        catch (HttpRequestException ex)
        {
            stopwatch.Stop();
            testResult.Success = false;
            testResult.ErrorMessage = $"Connection failed: {ex.Message}";
            testResult.ResponseTime = stopwatch.ElapsedMilliseconds;
            
            Logger.LogError(ex, "HTTP request exception during API test: {Message}", ex.Message);
        }
        catch (TaskCanceledException ex)
        {
            stopwatch.Stop();
            testResult.Success = false;
            testResult.ErrorMessage = "Request timeout";
            testResult.ResponseTime = stopwatch.ElapsedMilliseconds;
            
            Logger.LogError(ex, "Timeout during API test: {Message}", ex.Message);
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            testResult.Success = false;
            testResult.ErrorMessage = $"Unexpected error: {ex.Message}";
            testResult.ResponseTime = stopwatch.ElapsedMilliseconds;
            
            Logger.LogError(ex, "Unexpected error during API test: {Message}", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    public class TestResult
    {
        public bool Success { get; set; }
        public string StatusCode { get; set; } = "";
        public long ResponseTime { get; set; }
        public string ErrorMessage { get; set; } = "";
        public string ResponseContent { get; set; } = "";
    }
} 