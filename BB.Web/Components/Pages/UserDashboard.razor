@page "/user-dashboard"
@using BB.Api.Endpoints.Analytics
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor
@using BB.Web.Services
@using BB.Web.Components.Common
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject WorkspaceService WorkspaceService
@rendermode InteractiveServer

<PageTitle>User Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Removed: <h1 class="mb-4"><i class="bi bi-speedometer2"></i> User Dashboard</h1> -->
        </div>
    </div>

    <CommitsFilter
        IsLoadingRepos="@isLoadingRepos"
        Repositories="@repositories"
        SelectedRepoSlug="@selectedRepoSlug"
        StartDate="@startDate"
        EndDate="@endDate"
        ShowGrouping="false"
        ShowExcluded="false"
        OnRepositorySelected="OnRepositorySelected"
        OnDateRangeUpdated="OnDateRangeUpdated"
        OnFiltersChanged="OnFiltersChanged"
        OnGroupingUpdated="OnGroupingUpdated"
        OnShowExcludedChanged="OnShowExcludedChanged" />

    @if (isLoading)
    {
        <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
            <div class="d-flex align-items-center">
                <div class="spinner-border spinner-border-sm me-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span>Loading dashboard data...</span>
            </div>
        </RadzenAlert>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else if (dashboardData != null)
    {
        <h3 class="mb-4">Usage Statistics</h3>
        <div class="row">
            <!-- Active Contributing Users -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-start">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-3">Active Contributing Users</h5>
                            <i class="bi bi-people-fill fs-3 text-primary"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            @dashboardData.CurrentPeriod.ActiveContributingUsers
                            @{
                                var userChange = (double)dashboardData.CurrentPeriod.ActiveContributingUsers - dashboardData.PreviousPeriod.ActiveContributingUsers;
                                var userPercentageChange = dashboardData.PreviousPeriod.ActiveContributingUsers > 0
                                    ? (userChange / dashboardData.PreviousPeriod.ActiveContributingUsers) * 100
                                    : 0;
                                var userChangeClass = userPercentageChange >= 0 ? "text-success" : "text-danger";
                                var userChangeIcon = userPercentageChange >= 0 ? "bi-arrow-up" : "bi-arrow-down";
                            }
                            <span class="small @userChangeClass">
                                <i class="bi @userChangeIcon"></i> @userPercentageChange.ToString("F1")%
                            </span>
                        </h2>
                        <p class="text-muted small mb-0">Last period: @dashboardData.PreviousPeriod.ActiveContributingUsers</p>
                        <p class="text-muted small mb-0">@dashboardData.CurrentPeriod.StartDate.ToString("MMM dd") - @dashboardData.CurrentPeriod.EndDate.ToString("MMM dd")</p>
                    </div>
                </div>
            </div>

            <!-- Total Commits -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-0">Total Commits</h5>
                            <i class="bi bi-git text-info fs-4"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            @dashboardData.CurrentPeriod.TotalCommits
                            @{
                                var commitChange = (double)dashboardData.CurrentPeriod.TotalCommits - dashboardData.PreviousPeriod.TotalCommits;
                                var commitPercentageChange = dashboardData.PreviousPeriod.TotalCommits > 0
                                    ? (commitChange / dashboardData.PreviousPeriod.TotalCommits) * 100
                                    : 0;
                                var commitChangeClass = commitPercentageChange >= 0 ? "text-success" : "text-danger";
                                var commitChangeIcon = commitPercentageChange >= 0 ? "bi-arrow-up" : "bi-arrow-down";
                            }
                            <span class="fs-6 @commitChangeClass">
                                <i class="bi @commitChangeIcon"></i> @commitPercentageChange.ToString("0.0")%
                            </span>
                        </h2>
                        <p class="text-muted small mb-0">Last period: @dashboardData.PreviousPeriod.TotalCommits</p>
                        <p class="text-muted small mb-0">@dashboardData.CurrentPeriod.StartDate.ToString("MMM dd") - @dashboardData.CurrentPeriod.EndDate.ToString("MMM dd")</p>
                    </div>
                </div>
            </div>

            <!-- Repositories Updated -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-0">Repositories Updated</h5>
                            <i class="bi bi-folder-fill text-warning fs-4"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            @dashboardData.CurrentPeriod.RepositoriesUpdated
                            @{
                                var repoChange = (double)dashboardData.CurrentPeriod.RepositoriesUpdated - dashboardData.PreviousPeriod.RepositoriesUpdated;
                                var repoPercentageChange = dashboardData.PreviousPeriod.RepositoriesUpdated > 0
                                    ? (repoChange / dashboardData.PreviousPeriod.RepositoriesUpdated) * 100
                                    : 0;
                                var repoChangeClass = repoPercentageChange >= 0 ? "text-success" : "text-danger";
                                var repoChangeIcon = repoPercentageChange >= 0 ? "bi-arrow-up" : "bi-arrow-down";
                            }
                            <span class="fs-6 @repoChangeClass">
                                <i class="bi @repoChangeIcon"></i> @repoPercentageChange.ToString("0.0")%
                            </span>
                        </h2>
                        <p class="text-muted small mb-0">Last period: @dashboardData.PreviousPeriod.RepositoriesUpdated</p>
                        <p class="text-muted small mb-0">@dashboardData.CurrentPeriod.StartDate.ToString("MMM dd") - @dashboardData.CurrentPeriod.EndDate.ToString("MMM dd")</p>
                    </div>
                </div>
            </div>

            <!-- PRs Not Approved and Merged -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-0">PRs Not Approved and Merged</h5>
                            <i class="bi bi-x-circle-fill text-danger fs-4"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            <span class="text-danger">@dashboardData.CurrentPeriod.PrsNotApprovedAndMerged</span>
                        </h2>
                        <p class="text-muted small mb-0">Current Period</p>
                        <p class="text-muted small mb-0">@dashboardData.CurrentPeriod.StartDate.ToString("MMM dd") - @dashboardData.CurrentPeriod.EndDate.ToString("MMM dd")</p>
                    </div>
                </div>
            </div>

            <!-- Users Count with No Activity -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-0">Users with No Activity</h5>
                            <i class="bi bi-person-slash-fill text-warning fs-4"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            <span class="text-warning">@dashboardData.UsersWithNoActivity</span>
                        </h2>
                        <p class="text-muted small mb-0">Current Period</p>
                        <p class="text-muted small mb-0">@dashboardData.CurrentPeriod.StartDate.ToString("MMM dd") - @dashboardData.CurrentPeriod.EndDate.ToString("MMM dd")</p>
                    </div>
                </div>
            </div>
        </div>

        <h3 class="mb-4 mt-4">Detailed Insights</h3>
        <div class="row">
            <!-- PR Average Age Graph -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-3">PR Average Age (Open & Merged)</h5>
                        <div class="flex-grow-1">
                            <canvas id="prAgeChart" class="w-100 h-100"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Biggest Contributor Users -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-3">Biggest Contributor Users (Commits & Code Lines)</h5>
                        <div class="table-responsive flex-grow-1">
                            <table class="table table-striped table-hover table-sm mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>User</th>
                                        <th>Commits</th>
                                        <th>Code Added</th>
                                        <th>Code Removed</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var contributor in dashboardData.TopContributors)
                                    {
                                        <tr>
                                            <td>@contributor.UserName</td>
                                            <td>@contributor.Commits</td>
                                            <td class="text-success">+@contributor.CodeLinesAdded</td>
                                            <td class="text-danger">-@contributor.CodeLinesRemoved</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Most Approvals by Top 5 Team Members -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-3">Most Approvals by Top 5 Team Members</h5>
                        <div class="table-responsive flex-grow-1">
                            <table class="table table-striped table-hover table-sm mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>User</th>
                                        <th>PR Approvals</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var approver in dashboardData.TopApprovers)
                                    {
                                        <tr>
                                            <td>@approver.UserName</td>
                                            <td>@approver.PrApprovalCount</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- PRs Merged by Weekday Chart -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-3">PRs Merged by Weekday</h5>
                        <div class="flex-grow-1">
                            <canvas id="prsMergedByWeekdayChart" class="w-100 h-100"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private UserDashboardResponseDto? dashboardData;
    private bool isLoading = true;
    private string? errorMessage;
    private BB.Api.Endpoints.Analytics.RepositorySummaryDto[]? repositories;
    private bool isLoadingRepos = true;
    private string? selectedRepoSlug;
    private DateTime? startDate;
    private DateTime? endDate;

    protected override async Task OnInitializedAsync()
    {
        // Set default date range to the last 30 days
        endDate = DateTime.Now;
        startDate = endDate.Value.AddDays(-30);

        // Load all available repositories first
        await LoadRepositories();

        if (repositories != null && repositories.Any())
        {
            // If no workspace is selected in WorkspaceService, try to auto-select one
            if (!WorkspaceService.HasSelectedWorkspace)
            {
                // Find the first actual repository (not the "All Repositories" option)
                var firstActualRepo = repositories.FirstOrDefault(r => r.Slug != "ALL");
                if (firstActualRepo != null)
                {
                    WorkspaceService.SelectedWorkspace = firstActualRepo.Workspace;
                }
            }

            // Now, if a workspace is selected (either previously or auto-selected), filter the repositories for the UI
            if (WorkspaceService.HasSelectedWorkspace && repositories != null)
            {
                // Filter repositories by the selected workspace, always including the "ALL" option
                repositories = repositories
                    .Where(r => r.Workspace == WorkspaceService.SelectedWorkspace || r.Slug == "ALL")
                    .ToArray();

                // If selectedRepoSlug is not set or invalid for the current workspace, default to "ALL"
                if (string.IsNullOrEmpty(selectedRepoSlug) || (repositories != null && !repositories.Any(r => r.Slug == selectedRepoSlug)))
                {
                    selectedRepoSlug = "ALL";
                }
            }
            else // If still no workspace is selected (e.g., no repositories at all), redirect to settings
            {
                Navigation.NavigateTo("/admin/settings");
                return;
            }
        }

        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var url = "api/userdashboard";
            var queryParams = new List<string>();

            if (startDate.HasValue)
            {
                queryParams.Add($"startDate={startDate.Value:yyyy-MM-dd}");
            }
            if (endDate.HasValue)
            {
                queryParams.Add($"endDate={endDate.Value:yyyy-MM-dd}");
            }
            if (!string.IsNullOrEmpty(selectedRepoSlug) && selectedRepoSlug != "ALL")
            {
                queryParams.Add($"repoSlug={selectedRepoSlug}");
            }

            if (queryParams.Any())
            {
                url += "?" + string.Join("&", queryParams);
            }

            dashboardData = await Http.GetFromJsonAsync<UserDashboardResponseDto>(url);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading dashboard data: {ex.Message}";
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadRepositories()
    {
        isLoadingRepos = true;
        try
        {
            var fetchedRepos = await Http.GetFromJsonAsync<BB.Api.Endpoints.Analytics.RepositorySummaryDto[]>("api/analytics/repositories");
            if (fetchedRepos != null)
            {
                repositories = fetchedRepos.ToArray();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading repositories: {ex.Message}";
        }
        finally
        {
            isLoadingRepos = false;
        }
    }

    private async Task OnRepositorySelected(string? repoSlug)
    {
        selectedRepoSlug = repoSlug;
        await LoadDashboardData();
    }

    private async Task OnDateRangeUpdated((DateTime? start, DateTime? end) dates)
    {
        startDate = dates.start;
        endDate = dates.end;
        await LoadDashboardData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && dashboardData != null)
        {
            await RenderPrAgeChart();
            await RenderPrsMergedByWeekdayChart();
        }
    }

    private async Task RenderPrAgeChart()
    {
        if (dashboardData == null || (dashboardData.PrAgeGraphData.OpenPrAge.Count == 0 && dashboardData.PrAgeGraphData.MergedPrAge.Count == 0))
        {
            return;
        }

        // Prepare data for the chart
        var openPrData = dashboardData.PrAgeGraphData.OpenPrAge.Select(p => new { x = p.Days, y = p.PrCount }).ToList();
        var mergedPrData = dashboardData.PrAgeGraphData.MergedPrAge.Select(p => new { x = p.Days, y = p.PrCount }).ToList();

        // Pass data to JavaScript for chart rendering
        await JSRuntime.InvokeVoidAsync("renderPrAgeChart", new { openPrData, mergedPrData });
    }

    private async Task RenderPrsMergedByWeekdayChart()
    {
        if (dashboardData == null || dashboardData.PrsMergedByWeekdayData.MergedPrsByWeekday.Count == 0)
        {
            return;
        }

        var chartData = dashboardData.PrsMergedByWeekdayData.MergedPrsByWeekday.Select(p => new { dayOfWeek = p.DayOfWeek, prCount = p.PrCount }).ToList();

        await JSRuntime.InvokeVoidAsync("renderPrsMergedByWeekdayChart", chartData);
    }

    // These methods are not directly used by UserDashboard, but are required by CommitsFilter component
    // They can be left as empty implementations or throw NotImplementedException if not relevant for this dashboard
    private Task OnFiltersChanged((bool includePR, bool includeData, bool includeConfig) filters)
    {
        // No filters to apply on User Dashboard, so this can be empty
        return Task.CompletedTask;
    }

    private Task OnGroupingUpdated(string grouping)
    {
        // Grouping is not applicable for User Dashboard, so this can be empty
        return Task.CompletedTask;
    }

    private Task OnShowExcludedChanged(bool value)
    {
        // ShowExcluded is not applicable for User Dashboard, so this can be empty
        return Task.CompletedTask;
    }
} 