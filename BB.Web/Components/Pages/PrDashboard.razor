@page "/pr-dashboard"
@using BB.Web.Services
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor
@using BB.Web.Components.Common
@using BB.Api.Endpoints.Analytics
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject WorkspaceService WorkspaceService
@inject NavigationManager Navigation
@inject ILogger<PrDashboard> Logger
@rendermode InteractiveServer

<PageTitle>PR Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="bi bi-graph-up"></i> PR Dashboard
            </h1>
        </div>
    </div>

    @if (!WorkspaceService.HasSelectedWorkspace)
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Workspace Not Configured</h4>
            <p>Please select a workspace in Settings to view PR statistics.</p>
            <hr>
            <button class="btn btn-primary" @onclick='() => Navigation.NavigateTo("/admin/settings")'>
                <i class="bi bi-gear-fill me-2"></i>Go to Settings
            </button>
        </div>
    }
    else
    {
        <PRFilter 
            IsLoadingRepos="@isLoadingRepos"
            Repositories="@repositories"
            SelectedRepoSlug="@selectedRepoSlug"
            StartDate="@startDate"
            EndDate="@endDate"
            OnRepositorySelected="OnRepositorySelected"
            OnDateRangeUpdated="OnDateRangeUpdated" />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Darker">
                @errorMessage
            </RadzenAlert>
        }

        @if (isLoadingTopOpenPrs)
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading top open PRs...</span>
                </div>
            </RadzenAlert>
        }
        else if (topOpenPrs != null && topOpenPrs.Any())
        {
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Top 5 Projects by Open PRs</h5>
                        </div>
                        <div class="card-body">
                            <RadzenDataGrid Data="@topOpenPrs" TItem="BB.Api.Endpoints.Analytics.RepositorySummaryDto" AllowColumnResize="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="BB.Api.Endpoints.Analytics.RepositorySummaryDto" Property="Name" Title="Repository" />
                                    <RadzenDataGridColumn TItem="BB.Api.Endpoints.Analytics.RepositorySummaryDto" Property="OpenPullRequestCount" Title="Open PRs" TextAlign="TextAlign.Center" />
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                No data for top open PRs found for the selected criteria.
            </div>
        }

        @if (isLoadingTopOldestOpenPrs)
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading top oldest open PRs...</span>
                </div>
            </RadzenAlert>
        }
        else if (topOldestOpenPrs != null && topOldestOpenPrs.Any())
        {
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Top 5 Projects by Oldest Open PRs</h5>
                        </div>
                        <div class="card-body">
                            <RadzenDataGrid Data="@topOldestOpenPrs" TItem="BB.Api.Endpoints.Analytics.RepositorySummaryDto" AllowColumnResize="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="BB.Api.Endpoints.Analytics.RepositorySummaryDto" Property="Name" Title="Repository" />
                                    <RadzenDataGridColumn TItem="BB.Api.Endpoints.Analytics.RepositorySummaryDto" Property="OldestOpenPullRequestDate" Title="Oldest PR Date" TextAlign="TextAlign.Center" FormatString="{0:yyyy-MM-dd}" />
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                No data for top oldest open PRs found for the selected criteria.
            </div>
        }

        @if (isLoadingTopUnapprovedPrs)
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading top unapproved PRs...</span>
                </div>
            </RadzenAlert>
        }
        else if (topUnapprovedPrs != null && topUnapprovedPrs.Any())
        {
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Top 5 Projects by Unapproved PRs</h5>
                        </div>
                        <div class="card-body">
                            <RadzenDataGrid Data="@topUnapprovedPrs" TItem="BB.Api.Endpoints.Analytics.RepositorySummaryDto" AllowColumnResize="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="BB.Api.Endpoints.Analytics.RepositorySummaryDto" Property="Name" Title="Repository" />
                                    <RadzenDataGridColumn TItem="BB.Api.Endpoints.Analytics.RepositorySummaryDto" Property="PRsMissingApprovalCount" Title="Missing Approvals" TextAlign="TextAlign.Center" />
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                No data for top unapproved PRs found for the selected criteria.
            </div>
        }

        @if (isLoadingPrAgeBubbleData)
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading PR age bubble graph data...</span>
                </div>
            </RadzenAlert>
        }
        else if (prAgeBubbleData != null && prAgeBubbleData.Any())
        {
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">PR Age Distribution (1-20 Days)</h5>
                        </div>
                        <div class="card-body">
                            <div style="position: relative; height: 400px;">
                                <canvas id="prAgeBubbleChart"></canvas>
                                @if (isLoadingPrAgeBubbleData)
                                {
                                    <div class="d-flex align-items-center justify-content-center h-100 position-absolute top-0 start-0 w-100 bg-white bg-opacity-75">
                                        <div class="text-center">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading chart...</span>
                                            </div>
                                            <p class="mt-2 text-muted">Loading chart data...</p>
                                        </div>
                                    </div>
                                }
                                @if (prAgeBubbleData == null || !prAgeBubbleData.Any())
                                {
                                    <div class="d-flex align-items-center justify-content-center h-100 position-absolute top-0 start-0 w-100">
                                        <div class="text-center text-muted">
                                            <i class="bi bi-graph-up" style="font-size: 3rem;"></i>
                                            <p class="mt-2">No data available for PR age distribution.</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                No data for PR age bubble graph found for the selected criteria.
            </div>
        }
    }
</div>

@code {
    private IEnumerable<BB.Api.Endpoints.Analytics.RepositorySummaryDto>? repositories;
    private List<BB.Api.Endpoints.Analytics.RepositorySummaryDto>? topOpenPrs;
    private List<BB.Api.Endpoints.Analytics.RepositorySummaryDto>? topOldestOpenPrs;
    private List<BB.Api.Endpoints.Analytics.RepositorySummaryDto>? topUnapprovedPrs;
    private List<PrAgeBubbleDto>? prAgeBubbleData;
    private bool isLoadingRepos = true;
    private bool isLoadingTopOpenPrs = false;
    private bool isLoadingTopOldestOpenPrs = false;
    private bool isLoadingTopUnapprovedPrs = false;
    private bool isLoadingPrAgeBubbleData = false;
    private string? selectedRepoSlug;
    private DateTime? startDate;
    private DateTime? endDate;
    private string? errorMessage;

    private DotNetObjectReference<PrDashboard>? _dotNetRef;
    private bool prAgeChartInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRepositories();

        if (!WorkspaceService.HasSelectedWorkspace && repositories != null && repositories.Any())
        {
            var firstWorkspace = repositories.First().Workspace;
            WorkspaceService.SelectedWorkspace = firstWorkspace;
            repositories = repositories.Where(r => r.Workspace == firstWorkspace).ToArray();
        }
        else if (WorkspaceService.HasSelectedWorkspace && repositories != null && repositories.Any())
        {
            repositories = repositories.Where(r => r.Workspace == WorkspaceService.SelectedWorkspace).ToArray();
        }

        if (!WorkspaceService.HasSelectedWorkspace)
        {
            Navigation.NavigateTo("/admin/settings");
            return;
        }

        if (repositories != null && repositories.Any() && string.IsNullOrEmpty(selectedRepoSlug) && WorkspaceService.HasSelectedWorkspace)
        {
            selectedRepoSlug = "ALL";
            startDate = DateTime.Today.AddDays(-30);
            endDate = DateTime.Today;
            await LoadTopOpenPrs();
            await LoadTopOldestOpenPrs();
            await LoadTopUnapprovedPrs();
            await LoadPrAgeBubbleData();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setPrDashboardDotNetRef", _dotNetRef);
        }
        if (!firstRender && prAgeBubbleData != null && prAgeBubbleData.Any() && !prAgeChartInitialized)
        {
            await InitializePrAgeBubbleChart();
        }
    }

    private async Task LoadRepositories()
    {
        try
        {
            isLoadingRepos = true;
            var allRepositories = await Http.GetFromJsonAsync<RepositorySummaryDto[]?>("api/analytics/repositories");
            repositories = allRepositories ?? Array.Empty<RepositorySummaryDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading repositories: {ex.Message}";
            Logger.LogError(ex, "Error loading repositories");
        }
        finally
        {
            isLoadingRepos = false;
        }
    }

    private async Task OnRepositorySelected(string? slug)
    {
        selectedRepoSlug = slug;
        prAgeChartInitialized = false; // Reset chart state
        await RefreshDashboardData();
    }

    private async Task OnDateRangeUpdated((DateTime? start, DateTime? end) range)
    {
        startDate = range.start;
        endDate = range.end;
        prAgeChartInitialized = false; // Reset chart state
        await RefreshDashboardData();
    }

    private async Task RefreshDashboardData()
    {
        if (!string.IsNullOrEmpty(selectedRepoSlug) && WorkspaceService.HasSelectedWorkspace)
        {
            await LoadTopOpenPrs();
            await LoadTopOldestOpenPrs();
            await LoadTopUnapprovedPrs();
            await LoadPrAgeBubbleData();

            // Only initialize chart if data is present
            if (prAgeBubbleData != null && prAgeBubbleData.Any())
            {
                await InitializePrAgeBubbleChart();
            }
            StateHasChanged();
        }
        else
        {
            topOpenPrs = null;
            topOldestOpenPrs = null;
            topUnapprovedPrs = null;
            prAgeBubbleData = null;
            StateHasChanged();
        }
    }

    private async Task LoadTopOpenPrs()
    {
        try
        {
            isLoadingTopOpenPrs = true;
            errorMessage = null;

            var workspace = WorkspaceService.SelectedWorkspace;
            if (string.IsNullOrEmpty(workspace))
            {
                errorMessage = "No workspace selected. Please configure workspace in Settings.";
                Logger.LogWarning("LoadTopOpenPrs: No workspace provided");
                return;
            }

            var url = $"api/analytics/top-open-prs?workspace={workspace}";
            if (!string.IsNullOrEmpty(selectedRepoSlug) && selectedRepoSlug != "ALL")
            {
                url += $"&repoSlug={selectedRepoSlug}";
            }
            if (startDate.HasValue)
            {
                url += $"&startDate={startDate.Value:yyyy-MM-dd}";
            }
            if (endDate.HasValue)
            {
                url += $"&endDate={endDate.Value:yyyy-MM-dd}";
            }

            topOpenPrs = await Http.GetFromJsonAsync<List<RepositorySummaryDto>>(url);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading top open PRs: {ex.Message}";
            Logger.LogError(ex, "Error loading top open PRs");
        }
        finally
        {
            isLoadingTopOpenPrs = false;
            StateHasChanged();
        }
    }

    private async Task LoadTopOldestOpenPrs()
    {
        try
        {
            isLoadingTopOldestOpenPrs = true;
            errorMessage = null;

            var workspace = WorkspaceService.SelectedWorkspace;
            if (string.IsNullOrEmpty(workspace))
            {
                errorMessage = "No workspace selected. Please configure workspace in Settings.";
                Logger.LogWarning("LoadTopOldestOpenPrs: No workspace provided");
                return;
            }

            var url = $"api/analytics/top-oldest-open-prs?workspace={workspace}";
            if (!string.IsNullOrEmpty(selectedRepoSlug) && selectedRepoSlug != "ALL")
            {
                url += $"&repoSlug={selectedRepoSlug}";
            }
            if (startDate.HasValue)
            {
                url += $"&startDate={startDate.Value:yyyy-MM-dd}";
            }
            if (endDate.HasValue)
            {
                url += $"&endDate={endDate.Value:yyyy-MM-dd}";
            }

            topOldestOpenPrs = await Http.GetFromJsonAsync<List<RepositorySummaryDto>>(url);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading top oldest open PRs: {ex.Message}";
            Logger.LogError(ex, "Error loading top oldest open PRs");
        }
        finally
        {
            isLoadingTopOldestOpenPrs = false;
            StateHasChanged();
        }
    }

    private async Task LoadTopUnapprovedPrs()
    {
        try
        {
            isLoadingTopUnapprovedPrs = true;
            errorMessage = null;

            var workspace = WorkspaceService.SelectedWorkspace;
            if (string.IsNullOrEmpty(workspace))
            {
                errorMessage = "No workspace selected. Please configure workspace in Settings.";
                Logger.LogWarning("LoadTopUnapprovedPrs: No workspace provided");
                return;
            }

            var url = $"api/analytics/top-unapproved-prs?workspace={workspace}";
            if (!string.IsNullOrEmpty(selectedRepoSlug) && selectedRepoSlug != "ALL")
            {
                url += $"&repoSlug={selectedRepoSlug}";
            }
            if (startDate.HasValue)
            {
                url += $"&startDate={startDate.Value:yyyy-MM-dd}";
            }
            if (endDate.HasValue)
            {
                url += $"&endDate={endDate.Value:yyyy-MM-dd}";
            }

            topUnapprovedPrs = await Http.GetFromJsonAsync<List<RepositorySummaryDto>>(url);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading top unapproved PRs: {ex.Message}";
            Logger.LogError(ex, "Error loading top unapproved PRs");
        }
        finally
        {
            isLoadingTopUnapprovedPrs = false;
            StateHasChanged();
        }
    }

    private async Task LoadPrAgeBubbleData()
    {
        try
        {
            isLoadingPrAgeBubbleData = true;
            errorMessage = null;

            var workspace = WorkspaceService.SelectedWorkspace;
            if (string.IsNullOrEmpty(workspace))
            {
                errorMessage = "No workspace selected. Please configure workspace in Settings.";
                Logger.LogWarning("LoadPrAgeBubbleData: No workspace provided");
                return;
            }

            var url = $"api/analytics/pr-age-bubble?workspace={workspace}";
            if (!string.IsNullOrEmpty(selectedRepoSlug) && selectedRepoSlug != "ALL")
            {
                url += $"&repoSlug={selectedRepoSlug}";
            }
            if (startDate.HasValue)
            {
                url += $"&startDate={startDate.Value:yyyy-MM-dd}";
            }
            if (endDate.HasValue)
            {
                url += $"&endDate={endDate.Value:yyyy-MM-dd}";
            }

            prAgeBubbleData = await Http.GetFromJsonAsync<List<PrAgeBubbleDto>>(url);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading PR age bubble data: {ex.Message}";
            Logger.LogError(ex, "Error loading PR age bubble data");
        }
        finally
        {
            isLoadingPrAgeBubbleData = false;
            StateHasChanged();
        }
    }

    private async Task InitializePrAgeBubbleChart()
    {
        if (prAgeBubbleData != null && prAgeBubbleData.Any())
        {
            var chartData = prAgeBubbleData.Select(p => new
            {
                x = p.AgeInDays,
                y = p.NumberOfPRs,
                r = Math.Sqrt(p.NumberOfPRs) * 5, // Radius based on sqrt of PR count for better visual scaling
                repoName = p.RepositoryName
            }).ToArray();

            await JSRuntime.InvokeVoidAsync("initializePrAgeBubbleChart", new object[] { chartData });
            prAgeChartInitialized = true;
        }
    }

    private void NavigateToSettings()
    {
        Navigation.NavigateTo("/admin/settings");
    }
}

<script>
    window.initializePrAgeBubbleChart = (data) => {
        const chartElement = document.getElementById('prAgeBubbleChart');
        if (!chartElement) {
            console.error('PR age bubble chart canvas element not found.');
            return;
        }

        const ctx = chartElement.getContext('2d');

        if (window.prAgeBubbleChart && typeof window.prAgeBubbleChart.destroy === 'function') {
            window.prAgeBubbleChart.destroy();
        }

        window.prAgeBubbleChart = new Chart(ctx, {
            type: 'bubble',
            data: {
                datasets: [{
                    label: 'PR Age Distribution',
                    data: data,
                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'PR Age Distribution (Days Open)',
                        font: {
                            size: 16,
                            weight: 'bold'
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const item = context.raw;
                                return `PRs: ${item.y}, Age: ${item.x} days${item.repoName ? `, Repo: ${item.repoName}` : ''}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'linear',
                        position: 'bottom',
                        title: {
                            display: true,
                            text: 'Age in Days'
                        },
                        min: 0,
                        max: 20,
                        ticks: {
                            stepSize: 1
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Number of PRs'
                        },
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    };

    window.setPrDashboardDotNetRef = function(dotNetRef) {
        window.prDashboardComponent = { dotNetRef: dotNetRef };
    };

    document.addEventListener('DOMContentLoaded', function() {
        // Any initial JS setup needed after DOM is fully loaded
    });
</script> 