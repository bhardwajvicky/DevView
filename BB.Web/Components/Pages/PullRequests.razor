@page "/pull-requests"
@using BB.Web.DTOs
@using BB.Web.Services
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor
@using BB.Web.Components.Common
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject WorkspaceService WorkspaceService
@inject NavigationManager Navigation
@inject ILogger<PullRequests> Logger
@rendermode InteractiveServer

<PageTitle>Pull Requests</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="bi bi-git"></i> Pull Requests
            </h1>
        </div>
    </div>

    @if (!WorkspaceService.HasSelectedWorkspace)
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Workspace Not Configured</h4>
            <p>Please select a workspace in Settings to view pull request statistics.</p>
            <hr>
            <button class="btn btn-primary" @onclick="NavigateToSettings">
                <i class="bi bi-gear-fill me-2"></i>Go to Settings
            </button>
        </div>
    }
    else
    {
        <PRFilter 
            IsLoadingRepos="@isLoadingRepos"
            Repositories="@repositories"
            SelectedRepoSlug="@selectedRepoSlug"
            StartDate="@startDate"
            EndDate="@endDate"
            OnRepositorySelected="OnRepositorySelected"
            OnDateRangeUpdated="OnDateRangeUpdated" />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert @(errorMessage.StartsWith("Note:") ? "alert-info" : "alert-danger") alert-dismissible fade show" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }

        @if (isLoadingPRs)
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading pull requests...</span>
                </div>
            </RadzenAlert>
        }
        else if (pullRequests != null && pullRequests.Any())
        {
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-git me-2"></i>
                        Pull Request History
                        @if (selectedRepoSlug == null)
                        {
                            <span class="text-muted">- All Repositories</span>
                        }
                        else
                        {
                            var selectedRepo = repositories?.FirstOrDefault(r => r.Slug == selectedRepoSlug);
                            <span class="text-muted">- @(selectedRepo?.Name ?? selectedRepoSlug)</span>
                        }
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>PR #</th>
                                    <th>Repository</th>
                                    <th>Title</th>
                                    <th>Author</th>
                                    <th>State</th>
                                    <th>Approvals</th>
                                    <th>Days Open</th>
                                    <th>Created</th>
                                    <th>Updated</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pr in pullRequests)
                                {
                                    var daysOpen = pr.State.ToLower() == "open" 
                                        ? (DateTime.UtcNow - pr.CreatedOn).Days 
                                        : ((pr.UpdatedOn ?? DateTime.UtcNow) - pr.CreatedOn).Days;
                                    
                                    <tr>
                                        <td>
                                            <a href="#" @onclick="() => OpenBitbucketPR(pr.BitbucketPrId)" @onclick:preventDefault>
                                                #@pr.BitbucketPrId
                                            </a>
                                        </td>
                                        <td>@pr.RepositoryName</td>
                                        <td>
                                            <span title="@pr.Title">
                                                @(pr.Title.Length > 50 ? pr.Title[..50] + "..." : pr.Title)
                                            </span>
                                        </td>
                                        <td>@pr.AuthorName</td>
                                        <td>
                                            @{
                                                var (stateClass, icon) = pr.State.ToLower() switch
                                                {
                                                    "open" => ("bg-success", "bi-git"),
                                                    "merged" => ("bg-primary", "bi-check2-circle"),
                                                    "declined" => ("bg-danger", "bi-x-circle"),
                                                    "superseded" => ("bg-warning", "bi-arrow-repeat"),
                                                    _ => ("bg-secondary", "bi-question-circle")
                                                };
                                            }
                                            <span class="badge @stateClass">
                                                <i class="bi @icon me-1"></i>@pr.State
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowApprovals(pr)">
                                                @pr.ApprovalCount / @pr.RequiredApprovals
                                            </button>
                                        </td>
                                        <td>@daysOpen days</td>
                                        <td>@pr.CreatedOn.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td>@(pr.UpdatedOn?.ToString("yyyy-MM-dd HH:mm") ?? "-")</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => OpenBitbucketPR(pr.BitbucketPrId)">
                                                <i class="bi bi-box-arrow-up-right"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (totalPages > 1)
                    {
                        <div class="d-flex justify-content-center mt-3">
                            <nav>
                                <ul class="pagination">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
                                    </li>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        var pageNumber = i;
                                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">Next</button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                No pull requests found for the selected criteria.
            </div>
        }
    }
</div>

@if (showApprovalsModal && selectedPR != null)
{
    <div class="modal show" style="display: block; background: rgba(0,0,0,0.5);" tabindex="-1" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Approvals for PR #@selectedPR.BitbucketPrId</h5>
                    <button type="button" class="btn-close" @onclick="CloseApprovalsModal"></button>
                </div>
                <div class="modal-body">
                    @if (selectedPR.Approvals != null && selectedPR.Approvals.Any())
                    {
                        <div class="list-group">
                            @foreach (var approval in selectedPR.Approvals)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@approval.DisplayName</strong>
                                        <small class="text-muted d-block">@approval.Role</small>
                                    </div>
                                    @if (approval.Approved)
                                    {
                                        <span class="badge bg-success">
                                            <i class="bi bi-check-lg me-1"></i>Approved
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">
                                            <i class="bi bi-clock me-1"></i>Pending
                                        </span>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted mb-0">No approvals yet.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseApprovalsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<RepositorySummaryDto>? repositories;
    private List<PullRequestDto> pullRequests = new();
    private bool isLoadingRepos = true;
    private bool isLoadingPRs = false;
    private string? selectedRepoSlug;
    private DateTime? startDate;
    private DateTime? endDate;
    private string? errorMessage;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 25;
    private bool showApprovalsModal = false;
    private PullRequestDto? selectedPR;

    protected override async Task OnInitializedAsync()
    {
        await LoadRepositories();
    }

    private async Task LoadRepositories()
    {
        try
        {
            isLoadingRepos = true;
            repositories = await Http.GetFromJsonAsync<IEnumerable<RepositorySummaryDto>>("api/analytics/repositories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading repositories: {ex.Message}";
            Logger.LogError(ex, "Error loading repositories");
        }
        finally
        {
            isLoadingRepos = false;
        }
    }

    private async Task LoadPullRequests()
    {
        try
        {
            isLoadingPRs = true;
            errorMessage = null;

            var repoSlug = string.IsNullOrEmpty(selectedRepoSlug) ? "all" : selectedRepoSlug;
            var url = $"api/pullrequests/{repoSlug}?page={currentPage}&pageSize={pageSize}";
            
            if (startDate.HasValue) url += $"&startDate={startDate.Value:yyyy-MM-dd}";
            if (endDate.HasValue) url += $"&endDate={endDate.Value:yyyy-MM-dd}";

            var response = await Http.GetFromJsonAsync<PaginatedPullRequestsResponse>(url);
            if (response != null)
            {
                pullRequests = response.PullRequests;
                totalPages = response.TotalPages;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading pull requests: {ex.Message}";
            Logger.LogError(ex, "Error loading pull requests");
            pullRequests = new();
            totalPages = 1;
        }
        finally
        {
            isLoadingPRs = false;
        }
    }

    private async Task OnRepositorySelected(string? slug)
    {
        selectedRepoSlug = slug;
        currentPage = 1;
        await LoadPullRequests();
    }

    private async Task OnDateRangeUpdated((DateTime? start, DateTime? end) range)
    {
        startDate = range.start;
        endDate = range.end;
        currentPage = 1;
        await LoadPullRequests();
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > totalPages || page == currentPage) return;
        currentPage = page;
        await LoadPullRequests();
    }

    private void NavigateToSettings()
    {
        Navigation.NavigateTo("admin/settings");
    }

    private async Task OpenBitbucketPR(string prId)
    {
        var workspace = WorkspaceService.SelectedWorkspace;
        if (string.IsNullOrEmpty(workspace) || string.IsNullOrEmpty(selectedRepoSlug))
        {
            errorMessage = "Cannot open PR: workspace or repository information is missing.";
            return;
        }

        var url = $"https://bitbucket.org/{workspace}/{selectedRepoSlug}/pull-requests/{prId}";
        await JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    private void ShowApprovals(PullRequestDto pr)
    {
        selectedPR = pr;
        showApprovalsModal = true;
    }

    private void CloseApprovalsModal()
    {
        showApprovalsModal = false;
        selectedPR = null;
    }

    public class PullRequestDto
    {
        public string BitbucketPrId { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string AuthorName { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
        public DateTime CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public string RepositoryName { get; set; } = string.Empty;
        public int ApprovalCount { get; set; }
        public int RequiredApprovals { get; set; } = 1;
        public List<ApprovalDto> Approvals { get; set; } = new();
    }

    public class ApprovalDto
    {
        public string DisplayName { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public bool Approved { get; set; }
        public DateTime? ApprovedOn { get; set; }
    }

    public class PaginatedPullRequestsResponse
    {
        public List<PullRequestDto> PullRequests { get; set; } = new();
        public int TotalPages { get; set; }
    }
} 