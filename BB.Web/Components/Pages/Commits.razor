@page "/commits"
@using BB.Web.Services
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor
@using BB.Web.Components.Common
@using BB.Api.Endpoints.Analytics // For RepositorySummaryDto, UserDto
@using BB.Api.Endpoints.Commits // For CommitListItemDto, PaginatedCommitsResponse
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject WorkspaceService WorkspaceService
@inject NavigationManager Navigation
@inject ILogger<Commits> Logger
@rendermode InteractiveServer

<PageTitle>Repository Commits</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="bi bi-git"></i> Commits
            </h1>
        </div>
    </div>

    @if (!WorkspaceService.HasSelectedWorkspace)
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Workspace Not Configured</h4>
            <p>Please select a workspace in Settings to view commit statistics.</p>
            <hr>
            <button class="btn btn-primary" @onclick="NavigateToSettings">
                <i class="bi bi-gear-fill me-2"></i>Go to Settings
            </button>
        </div>
    }
    else
    {
        <CommitsFilter 
            IsLoadingRepos="@isLoadingRepos"
            Repositories="@repositories"
            SelectedRepoSlug="@selectedRepoSlug"
            IsLoadingUsers="@isLoadingUsers"
            Users="@users"
            SelectedUserId="@selectedUserId"
            StartDate="@startDate"
            EndDate="@endDate"
            IncludePR="@includePR"
            IncludeData="@includeData"
            IncludeConfig="@includeConfig"
            GroupBy="@groupBy"
            ShowGrouping="false"
            OnRepositorySelected="OnRepositorySelected"
            OnUserSelected="OnUserSelected"
            OnDateRangeUpdated="@((dateRange) => OnDateRangeUpdated(dateRange.start, dateRange.end))"
            OnFiltersChanged="OnFiltersChanged"
            OnGroupingUpdated="OnGroupingUpdated" />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert @(errorMessage.StartsWith("Note:") ? "alert-info" : "alert-danger") alert-dismissible fade show" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }

        @if (isLoadingCommits)
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading commit data...</span>
                </div>
            </RadzenAlert>
        }
        else if (commits != null && commits.Any())
        {
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-clock-history me-2"></i>
                        Commit History
                        @if (selectedRepoSlug == null)
                        {
                            <span class="text-muted">- All Repositories</span>
                        }
                        else
                        {
                            var selectedRepo = repositories?.FirstOrDefault(r => r.Slug == selectedRepoSlug);
                            <span class="text-muted">- @(selectedRepo?.Name ?? selectedRepoSlug)</span>
                        }
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Commit</th>
                                    <th>Repository</th>
                                    <th>Author</th>
                                    <th>Date Time</th>
                                    <th>Total Lines</th>
                                    <th class="text-success">Code ++</th>
                                    <th class="text-danger">Code --</th>
                                    <th class="text-success">Data ++</th>
                                    <th class="text-danger">Data --</th>
                                    <th class="text-success">Config ++</th>
                                    <th class="text-danger">Config --</th>
                                    <th style="width: 200px">Message</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var commit in commits)
                                {
                                    var totalAdded = commit.LinesAdded;
                                    var totalRemoved = commit.LinesRemoved;
                                    
                                    <tr>
                                        <td>
                                            <a href="#" @onclick="() => OpenBitbucketCommit(commit.Hash)" @onclick:preventDefault>
                                                @commit.Hash[..7]
                                            </a>
                                        </td>
                                        <td>@commit.RepositoryName</td>
                                        <td>@commit.AuthorName</td>
                                        <td>@commit.Date.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td>
                                            <span class="text-success">+@totalAdded</span>
                                            @if (totalRemoved > 0)
                                            {
                                                <span class="text-danger">-@totalRemoved</span>
                                            }
                                        </td>
                                        <td class="text-success">@(commit.CodeLinesAdded > 0 ? $"+{commit.CodeLinesAdded}" : "")</td>
                                        <td class="text-danger">@(commit.CodeLinesRemoved > 0 ? $"-{commit.CodeLinesRemoved}" : "")</td>
                                        <td class="text-success">@(commit.DataLinesAdded > 0 ? $"+{commit.DataLinesAdded}" : "")</td>
                                        <td class="text-danger">@(commit.DataLinesRemoved > 0 ? $"-{commit.DataLinesRemoved}" : "")</td>
                                        <td class="text-success">@(commit.ConfigLinesAdded > 0 ? $"+{commit.ConfigLinesAdded}" : "")</td>
                                        <td class="text-danger">@(commit.ConfigLinesRemoved > 0 ? $"-{commit.ConfigLinesRemoved}" : "")</td>
                                        <td>
                                            @if (commit.IsPRMergeCommit)
                                            {
                                                <span class="badge bg-primary me-2">PR</span>
                                            }
                                            <span title="@commit.Message" style="cursor: pointer" @onclick="() => ShowFullMessage(commit.Message)">
                                                @(commit.Message.Length > 50 ? commit.Message[..50] + "..." : commit.Message)
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (totalPages > 1)
                    {
                        <div class="d-flex justify-content-center mt-3">
                            <nav>
                                <ul class="pagination">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
                                    </li>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        var pageNumber = i;
                                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">Next</button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                No commits found for the selected criteria.
            </div>
        }
    }
</div>

@if (showMessageModal)
{
    <div class="modal show" style="display: block; background: rgba(0,0,0,0.5);" tabindex="-1" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Commit Message</h5>
                    <button type="button" class="btn-close" @onclick="CloseMessageModal"></button>
                </div>
                <div class="modal-body">
                    <p style="white-space: pre-wrap;">@selectedMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseMessageModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<RepositorySummaryDto>? repositories;
    private IEnumerable<BB.Api.Endpoints.Analytics.UserDto>? users;
    private List<CommitListItemDto> commits = new();
    private bool isLoadingRepos = true;
    private bool isLoadingUsers = true;
    private bool isLoadingCommits = false;
    private string? selectedRepoSlug;
    private int? selectedUserId;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool includePR = false;  // Changed default to false
    private bool includeData = true;
    private bool includeConfig = true;
    private string? groupBy = "Day"; // Make nullable and initialize to null
    private string? errorMessage;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 25;
    private string? selectedMessage;
    private bool showMessageModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadRepositories();
        await LoadUsers();
    }

    private async Task LoadRepositories()
    {
        try
        {
            isLoadingRepos = true;
            repositories = await Http.GetFromJsonAsync<IEnumerable<RepositorySummaryDto>>("api/analytics/repositories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading repositories: {ex.Message}";
            Logger.LogError(ex, "Error loading repositories");
        }
        finally
        {
            isLoadingRepos = false;
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoadingUsers = true;
            users = await Http.GetFromJsonAsync<IEnumerable<BB.Api.Endpoints.Analytics.UserDto>>("/api/analytics/users");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
            Logger.LogError(ex, "Error loading users");
        }
        finally
        {
            isLoadingUsers = false;
        }
    }

    private async Task LoadCommits()
    {
        try
        {
            isLoadingCommits = true;
            errorMessage = null;

            // Default to "all" if no repository is selected
            var repoSlug = string.IsNullOrEmpty(selectedRepoSlug) ? "all" : selectedRepoSlug;
            
            var url = $"api/commits/{repoSlug}?page={currentPage}&pageSize={pageSize}&includePR={includePR.ToString().ToLower()}";
            if (startDate.HasValue) url += $"&startDate={startDate.Value:yyyy-MM-dd}";
            if (endDate.HasValue) url += $"&endDate={endDate.Value:yyyy-MM-dd}";
            if (selectedUserId.HasValue) url += $"&userId={selectedUserId.Value}";

            var response = await Http.GetFromJsonAsync<PaginatedCommitsResponse>(url);
            if (response != null)
            {
                commits = response.Commits;
                totalPages = response.TotalPages;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading commits: {ex.Message}";
            Logger.LogError(ex, "Error loading commits");
            commits = new();
            totalPages = 1;
        }
        finally
        {
            isLoadingCommits = false;
        }
    }

    private async Task OnRepositorySelected(string? slug)
    {
        selectedRepoSlug = slug;
        currentPage = 1;
        await LoadCommits();
    }

    private async Task OnUserSelected(int? userId)
    {
        selectedUserId = userId;
        currentPage = 1;
        await LoadCommits();
    }

    private async Task OnDateRangeUpdated(DateTime? newStartDate, DateTime? newEndDate)
    {
        startDate = newStartDate;
        endDate = newEndDate;
        currentPage = 1;
        await LoadCommits();
    }

    private async Task OnGroupingUpdated(string? newGrouping)
    {
        groupBy = newGrouping;
        currentPage = 1;
        await LoadCommits();
    }

    private async Task OnFiltersChanged((bool includePR, bool includeData, bool includeConfig) filters)
    {
        this.includePR = filters.includePR;
        this.includeData = filters.includeData;
        this.includeConfig = filters.includeConfig;
        currentPage = 1;
        await LoadCommits();
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        await LoadCommits();
    }

    private void OpenBitbucketCommit(string hash)
    {
        var workspace = WorkspaceService.SelectedWorkspace;
        if (string.IsNullOrEmpty(workspace))
        {
            errorMessage = "Workspace not configured. Please select a workspace in Settings.";
            return;
        }

        var url = $"https://bitbucket.org/{workspace}/{selectedRepoSlug}/commits/{hash}";
        JSRuntime.InvokeVoidAsync("window.open", url, "_blank");
    }

    private void NavigateToSettings()
    {
        Navigation.NavigateTo("admin/settings");
    }

    private void ShowFullMessage(string message)
    {
        selectedMessage = message;
        showMessageModal = true;
    }

    private void CloseMessageModal()
    {
        showMessageModal = false;
        selectedMessage = null;
    }
} 