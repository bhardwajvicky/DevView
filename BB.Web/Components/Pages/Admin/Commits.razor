@page "/repositories/{RepoSlug}/commits"
@using BB.Web.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using System.Globalization
@inject IJSRuntime JS
@using BB.Web.Services
@inject WorkspaceService WorkspaceService
@rendermode InteractiveServer

@code {
    [Parameter]
    public string RepoSlug { get; set; }
    private List<CommitListItemDto> commits = new();
    private List<UserDto> users = new();
    private string? selectedUserId;
    private string? startDateString;
    private string? endDateString;
    private bool includePR = true;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 25;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        await LoadUsers();
        await LoadCommits();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<UserDto>>("/api/analytics/users") ?? new();
        }
        catch { users = new(); }
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        currentPage = 1;
        await LoadCommits();
    }

    private async Task LoadCommits()
    {
        Console.WriteLine($"LoadCommits called - currentPage: {currentPage}, includePR: {includePR}");
        isLoading = true;
        errorMessage = null;
        try
        {
            var url = $"/api/commits/{RepoSlug.ToLower()}?page={currentPage}&pageSize={pageSize}&includePR={includePR.ToString().ToLower()}";
            if (!string.IsNullOrEmpty(selectedUserId)) url += $"&userId={selectedUserId}";
            if (!string.IsNullOrEmpty(startDateString)) url += $"&startDate={startDateString}";
            if (!string.IsNullOrEmpty(endDateString)) url += $"&endDate={endDateString}";
            Console.WriteLine($"API URL: {url}");
            var response = await Http.GetFromJsonAsync<PaginatedCommitsResponse>(url);
            if (response != null)
            {
                Console.WriteLine($"Received {response.Commits.Count} commits, totalPages: {response.TotalPages}");
                commits = response.Commits;
                totalPages = response.TotalPages;
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Console.WriteLine($"Repository not found error: {ex.Message}");
            errorMessage = $"Repository '{RepoSlug}' not found. Please check the repository slug or sync repositories.";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadCommits error: {ex.Message}");
            errorMessage = $"Error loading commits: {ex.Message}";
        }
        isLoading = false;
        Console.WriteLine("LoadCommits completed, calling StateHasChanged");
        StateHasChanged();
    }

    private async Task GoToPage(int page)
    {
        Console.WriteLine($"GoToPage called with page: {page}, totalPages: {totalPages}");
        if (page < 1 || page > totalPages) 
        {
            Console.WriteLine($"Page {page} is out of bounds (1-{totalPages}), returning early");
            return;
        }
        Console.WriteLine($"Setting currentPage from {currentPage} to {page}");
        currentPage = page;
        Console.WriteLine("About to call LoadCommits from GoToPage");
        await LoadCommits();
        Console.WriteLine("LoadCommits completed from GoToPage");
    }

    private async Task GoToPageWithLog(int page)
    {
        Console.WriteLine($"Button clicked: displaying {page}, calling GoToPage({page})");
        await GoToPage(page);
    }

    private void OpenBitbucketPopup(string hash)
    {
        var owner = WorkspaceService.SelectedWorkspace ?? "";
        var url = $"https://bitbucket.org/{owner}/{RepoSlug}/commits/{hash}";
        JS.InvokeVoidAsync("window.open", url, "bitbucketPopup", "width=1000,height=800,noopener");
    }

    private async Task OnIncludePRChanged(ChangeEventArgs e)
    {
        Console.WriteLine($"OnIncludePRChanged called with value: {e.Value}");
        var oldValue = includePR;
        includePR = (bool)e.Value;
        Console.WriteLine($"includePR changed from {oldValue} to {includePR}");
        Console.WriteLine($"Setting currentPage from {currentPage} to 1");
        currentPage = 1;
        Console.WriteLine("About to call LoadCommits from OnIncludePRChanged");
        await LoadCommits();
        Console.WriteLine("LoadCommits completed from OnIncludePRChanged");
    }

    public class CommitListItemDto
    {
        public string Hash { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string AuthorName { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public bool IsMerge { get; set; }
        public bool IsPRMergeCommit { get; set; }
        public int LinesAdded { get; set; }
        public int LinesRemoved { get; set; }
        public int CodeLinesAdded { get; set; }
        public int CodeLinesRemoved { get; set; }
    }
    public class PaginatedCommitsResponse
    {
        public List<CommitListItemDto> Commits { get; set; } = new();
        public int TotalPages { get; set; }
    }
}

<h3>Commits for @RepoSlug</h3>
<div class="mb-3">
    <label class="form-check-label me-2">
        <input type="checkbox" class="form-check-input" checked="@includePR" @onchange="OnIncludePRChanged" /> Include PRs
    </label>
</div>
@if (isLoading)
{
    <div class="text-center my-4">
        <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (commits.Count == 0)
{
    <div class="alert alert-info">No commits found for this repository.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Commit</th>
                    <th>Author</th>
                    <th>Date Time</th>
                    <th>Total Lines</th>
                    <th>Code ++</th>
                    <th>Code --</th>
                    <th style="width:40%">Message</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var commit in commits)
                {
                    <tr>
                        <td>
                            <a href="#" @onclick="() => OpenBitbucketPopup(commit.Hash)" title="View on Bitbucket">@commit.Hash.Substring(0, 8)</a>
                        </td>
                        <td>@commit.AuthorName</td>
                        <td>@commit.Date.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>
                            @if (commit.LinesAdded > 0)
                            {
                                <span class="text-success fw-bold">++@commit.LinesAdded</span>
                            }
                            @if (commit.LinesRemoved > 0)
                            {
                                <span class="text-danger fw-bold ms-2">--@commit.LinesRemoved</span>
                            }
                        </td>
                        <td><span class="text-success fw-bold">@commit.CodeLinesAdded</span></td>
                        <td><span class="text-danger fw-bold">@commit.CodeLinesRemoved</span></td>
                        <td>
                            @if (commit.IsPRMergeCommit)
                            {
                                <span class="badge bg-primary me-2">PR</span>
                            }
                            <span>@commit.Message</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : null)">
                <button class="page-link" @onclick="async () => await GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
            </li>
            
            @if (currentPage > 3)
            {
                <li class="page-item">
                    <button class="page-link" @onclick="async () => await GoToPage(1)">1</button>
                </li>
                @if (currentPage > 4)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }
            
            @{
                var startPage = Math.Max(1, currentPage - 2);
                var endPage = Math.Min(totalPages, currentPage + 2);
                Console.WriteLine($"Pagination: currentPage={currentPage}, totalPages={totalPages}, showing pages {startPage}-{endPage}");
            }
            @for (int i = startPage; i <= endPage; i++)
            {
                var pageNum = i; // Capture the loop variable
                <li class="page-item @(i == currentPage ? "active" : null)">
                    <button class="page-link" @onclick="@(async () => await GoToPageWithLog(pageNum))" @onclick:preventDefault="true">@i</button>
                </li>
            }
            
            @if (currentPage < totalPages - 2)
            {
                @if (currentPage < totalPages - 3)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                <li class="page-item">
                    <button class="page-link" @onclick="async () => await GoToPage(totalPages)">@totalPages</button>
                </li>
            }
            
            <li class="page-item @(currentPage == totalPages ? "disabled" : null)">
                <button class="page-link" @onclick="async () => await GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">Next</button>
            </li>
        </ul>
        <div class="text-center mt-2">
            <small class="text-muted">Page @currentPage of @totalPages</small>
        </div>
    </nav>
} 