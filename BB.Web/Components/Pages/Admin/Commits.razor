@page "/repositories/{RepoSlug}/commits"
@using BB.Web.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

@code {
    [Parameter]
    public string RepoSlug { get; set; }
    private List<CommitListItemDto> commits = new();
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 25;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        await LoadCommits();
    }

    private async Task LoadCommits()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedCommitsResponse>($"/api/commits/{RepoSlug.ToLower()}?page={currentPage}&pageSize={pageSize}");
            if (response != null)
            {
                commits = response.Commits;
                totalPages = response.TotalPages;
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            errorMessage = $"Repository '{RepoSlug}' not found. Please check the repository slug or sync repositories.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading commits: {ex.Message}";
        }
        isLoading = false;
    }

    private void GoToPage(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        _ = LoadCommits();
    }
}

<h3>Commits for @RepoSlug</h3>
@if (isLoading)
{
    <div class="text-center my-4">
        <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (commits.Count == 0)
{
    <div class="alert alert-info">No commits found for this repository.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Commit</th>
                    <th>Message</th>
                    <th>Author</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var commit in commits)
                {
                    <tr>
                        <td>
                            <span class="text-monospace">@commit.Hash.Substring(0, 7)</span>
                            @if (commit.IsMerge || commit.IsPRMergeCommit)
                            {
                                <span class="badge bg-success ms-2">MERGED</span>
                            }
                        </td>
                        <td>@commit.Message</td>
                        <td>@commit.AuthorName</td>
                        <td>@commit.Date.ToString("yyyy-MM-dd HH:mm")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : null)">
                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">Previous</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : null)">
                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : null)">
                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    public class CommitListItemDto
    {
        public string Hash { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string AuthorName { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public bool IsMerge { get; set; }
        public bool IsPRMergeCommit { get; set; }
    }
    public class PaginatedCommitsResponse
    {
        public List<CommitListItemDto> Commits { get; set; } = new();
        public int TotalPages { get; set; }
    }
} 