@page "/user/{UserId:int}/commits"
@using BB.Web.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using System.Globalization
@using System.Linq
@inject IJSRuntime JS
@using BB.Web.Services
@inject WorkspaceService WorkspaceService
@rendermode InteractiveServer

@code {
    [Parameter]
    public int UserId { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? UserName { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? StartDate { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? EndDate { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? RepoSlug { get; set; }

    private List<CommitListItemDto> commits = new();
    private UserDto? selectedUser;
    private string? startDateString;
    private string? endDateString;
    private bool includePR = false; // Default unchecked as requested
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 25;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        // Initialize date strings from parameters
        startDateString = StartDate;
        endDateString = EndDate;
        
        await LoadUser();
        await LoadCommits();
    }

    private async Task LoadUser()
    {
        try
        {
            var users = await Http.GetFromJsonAsync<List<UserDto>>("/api/analytics/users") ?? new();
            selectedUser = users.FirstOrDefault(u => u.Id == UserId);
            
            // If UserName is provided but user not found by ID, try to find by name
            if (selectedUser == null && !string.IsNullOrEmpty(UserName))
            {
                selectedUser = users.FirstOrDefault(u => u.DisplayName.Equals(UserName, StringComparison.OrdinalIgnoreCase));
                if (selectedUser != null)
                {
                    UserId = selectedUser.Id;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
        }
    }

    private async Task OnDateRangeChanged(ChangeEventArgs? e = null)
    {
        currentPage = 1;
        await LoadCommits();
    }

    private async Task LoadCommits()
    {
        Console.WriteLine($"LoadCommits called - currentPage: {currentPage}, includePR: {includePR}, userId: {UserId}");
        isLoading = true;
        errorMessage = null;
        try
        {
            // Use the existing commits API endpoint with userId filter
            var url = $"/api/commits/{RepoSlug?.ToLower() ?? "all"}?page={currentPage}&pageSize={pageSize}&includePR={includePR.ToString().ToLower()}&userId={UserId}";
            
            if (!string.IsNullOrEmpty(startDateString)) url += $"&startDate={startDateString}";
            if (!string.IsNullOrEmpty(endDateString)) url += $"&endDate={endDateString}";
            
            Console.WriteLine($"API URL: {url}");
            var response = await Http.GetFromJsonAsync<PaginatedCommitsResponse>(url);
            if (response != null)
            {
                Console.WriteLine($"Received {response.Commits.Count} commits, totalPages: {response.TotalPages}");
                commits = response.Commits;
                totalPages = response.TotalPages;
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Console.WriteLine($"Repository not found error: {ex.Message}");
            errorMessage = $"Repository '{RepoSlug}' not found or no commits found for this user.";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadCommits error: {ex.Message}");
            errorMessage = $"Error loading commits: {ex.Message}";
        }
        isLoading = false;
        Console.WriteLine("LoadCommits completed, calling StateHasChanged");
        StateHasChanged();
    }

    private async Task GoToPage(int page)
    {
        Console.WriteLine($"GoToPage called with page: {page}, totalPages: {totalPages}");
        if (page < 1 || page > totalPages) 
        {
            Console.WriteLine($"Page {page} is out of bounds (1-{totalPages}), returning early");
            return;
        }
        Console.WriteLine($"Setting currentPage from {currentPage} to {page}");
        currentPage = page;
        Console.WriteLine("About to call LoadCommits from GoToPage");
        await LoadCommits();
        Console.WriteLine("LoadCommits completed from GoToPage");
    }

    private async Task GoToPageWithLog(int page)
    {
        Console.WriteLine($"Button clicked: displaying {page}, calling GoToPage({page})");
        await GoToPage(page);
    }

    private async void OpenBitbucketPopup(string hash, string? repositorySlug = null)
    {
        var owner = WorkspaceService.SelectedWorkspace;
        var targetRepo = repositorySlug ?? RepoSlug;
        
        // If workspace is not set, try to get it from repository data
        if (string.IsNullOrEmpty(owner))
        {
            Console.WriteLine("WorkspaceService.SelectedWorkspace is empty, fetching from repository data");
            try
            {
                var repositories = await Http.GetFromJsonAsync<RepositorySummaryDto[]>("/api/analytics/repositories");
                var repo = repositories?.FirstOrDefault(r => r.Slug.Equals(targetRepo, StringComparison.OrdinalIgnoreCase));
                if (repo != null)
                {
                    owner = repo.Workspace;
                    Console.WriteLine($"Found workspace from repository data: '{owner}'");
                    WorkspaceService.SelectedWorkspace = owner;
                }
                else
                {
                    Console.WriteLine($"Repository '{targetRepo}' not found in repository data");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching repository data: {ex.Message}");
            }
        }
        
        // If still no workspace, use a fallback or show an error
        if (string.IsNullOrEmpty(owner) || string.IsNullOrEmpty(targetRepo))
        {
            Console.WriteLine("No workspace or repository available, cannot open Bitbucket URL");
            return;
        }
        
        var url = $"https://bitbucket.org/{owner}/{targetRepo}/commits/{hash}";
        Console.WriteLine($"Opening Bitbucket URL: {url}");
        _ = JS.InvokeVoidAsync("window.open", url, "bitbucketPopup", "width=1000,height=800,noopener");
    }

    private async Task OnIncludePRChanged(ChangeEventArgs e)
    {
        Console.WriteLine($"OnIncludePRChanged called with value: {e.Value}");
        var oldValue = includePR;
        includePR = (bool)e.Value;
        Console.WriteLine($"includePR changed from {oldValue} to {includePR}");
        Console.WriteLine($"Setting currentPage from {currentPage} to 1");
        currentPage = 1;
        Console.WriteLine("About to call LoadCommits from OnIncludePRChanged");
        await LoadCommits();
        Console.WriteLine("LoadCommits completed from OnIncludePRChanged");
    }

    private void NavigateBack()
    {
        if (!string.IsNullOrEmpty(RepoSlug))
        {
            Navigation.NavigateTo($"/dashboard?repo={RepoSlug}");
        }
        else
        {
            Navigation.NavigateTo("/dashboard");
        }
    }

    public class CommitListItemDto
    {
        public string Hash { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string AuthorName { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public bool IsMerge { get; set; }
        public bool IsPRMergeCommit { get; set; }
        public int LinesAdded { get; set; }
        public int LinesRemoved { get; set; }
        public int CodeLinesAdded { get; set; }
        public int CodeLinesRemoved { get; set; }
        public string? RepositoryName { get; set; }
        public string? RepositorySlug { get; set; }
    }
    
    public class PaginatedCommitsResponse
    {
        public List<CommitListItemDto> Commits { get; set; } = new();
        public int TotalPages { get; set; }
    }
    
    public class UserDto
    {
        public int Id { get; set; }
        public string BitbucketUserId { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string AvatarUrl { get; set; } = string.Empty;
        public DateTime? CreatedOn { get; set; }
    }
    
    public class RepositorySummaryDto
    {
        public string Name { get; set; } = string.Empty;
        public string Slug { get; set; } = string.Empty;
        public string Workspace { get; set; } = string.Empty;
    }
}

<!-- Header Section with User Info and Navigation -->
<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h3 class="mb-2">
                        <i class="bi bi-person-circle me-2"></i>
                        Commits by @(selectedUser?.DisplayName ?? "User")
                    </h3>
                    @if (!string.IsNullOrEmpty(RepoSlug))
                    {
                        <p class="text-muted mb-0">
                            <i class="bi bi-folder me-1"></i>
                            Repository: <strong>@RepoSlug</strong>
                        </p>
                    }
                    else
                    {
                        <p class="text-muted mb-0">
                            <i class="bi bi-collection me-1"></i>
                            All Repositories
                        </p>
                    }
                </div>
                <div>
                    <button class="btn btn-outline-primary me-2" @onclick="NavigateBack">
                        <i class="bi bi-arrow-left me-1"></i>
                        Back to Dashboard
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Date Range and Filters -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="mb-3">
                <label class="form-label fw-bold">Start Date</label>
                <input type="date" class="form-control" value="@startDateString" @onchange="@(async (e) => { startDateString = e.Value?.ToString(); await OnDateRangeChanged(e); })" />
            </div>
        </div>
        <div class="col-md-3">
            <div class="mb-3">
                <label class="form-label fw-bold">End Date</label>
                <input type="date" class="form-control" value="@endDateString" @onchange="@(async (e) => { endDateString = e.Value?.ToString(); await OnDateRangeChanged(e); })" />
            </div>
        </div>
        <div class="col-md-3">
            <div class="mb-3">
                <label class="form-label fw-bold">Filters</label>
                <div>
                    <label class="form-check-label">
                        <input type="checkbox" class="form-check-input" checked="@includePR" @onchange="OnIncludePRChanged" /> Include PRs
                    </label>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="mb-3">
                <label class="form-label fw-bold">Quick Ranges</label>
                <div class="btn-group-vertical d-grid gap-1">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => SetDateRange(30)">Last 30 Days</button>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => SetDateRange(90)">Last 3 Months</button>
                    <button class="btn btn-sm btn-outline-info" @onclick="() => ClearDateRange()">All Time</button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center my-4">
            <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
            <p class="mt-2">Loading commits...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else if (commits.Count == 0)
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            No commits found for @(selectedUser?.DisplayName ?? "this user") in the selected date range.
        </div>
    }
    else
    {
        <!-- Summary Info -->
        <div class="row mb-3">
            <div class="col-12">
                <div class="alert alert-light border">
                    <div class="row text-center">
                        <div class="col-md-3">
                            <h5 class="mb-1">@commits.Count</h5>
                            <small class="text-muted">Commits (Page @currentPage of @totalPages)</small>
                        </div>
                        <div class="col-md-3">
                            <h5 class="mb-1 text-success">+@commits.Sum(c => c.CodeLinesAdded)</h5>
                            <small class="text-muted">Code Lines Added</small>
                        </div>
                        <div class="col-md-3">
                            <h5 class="mb-1 text-danger">-@commits.Sum(c => c.CodeLinesRemoved)</h5>
                            <small class="text-muted">Code Lines Removed</small>
                        </div>
                        <div class="col-md-3">
                            @{
                                var netChange = commits.Sum(c => c.CodeLinesAdded) - commits.Sum(c => c.CodeLinesRemoved);
                                var netClass = netChange >= 0 ? "text-success" : "text-danger";
                                var netSign = netChange >= 0 ? "+" : "";
                            }
                            <h5 class="mb-1 @netClass">@netSign@netChange</h5>
                            <small class="text-muted">Net Change</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Commits Table -->
        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Commit</th>
                        @if (string.IsNullOrEmpty(RepoSlug) || RepoSlug.Equals("all", StringComparison.OrdinalIgnoreCase))
                        {
                            <th>Repository</th>
                        }
                        <th>Date Time</th>
                        <th>Total Lines</th>
                        <th>Code ++</th>
                        <th>Code --</th>
                        <th style="width:40%">Message</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var commit in commits)
                    {
                        <tr>
                            <td>
                                <button type="button" class="btn btn-link p-0 text-decoration-underline" @onclick="() => OpenBitbucketPopup(commit.Hash, commit.RepositorySlug)" title="View on Bitbucket">@commit.Hash.Substring(0, 8)</button>
                            </td>
                            @if (string.IsNullOrEmpty(RepoSlug) || RepoSlug.Equals("all", StringComparison.OrdinalIgnoreCase))
                            {
                                <td>
                                    <span class="badge bg-secondary">@(commit.RepositoryName ?? commit.RepositorySlug ?? "Unknown")</span>
                                </td>
                            }
                            <td>@commit.Date.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>
                                @if (commit.LinesAdded > 0)
                                {
                                    <span class="text-success fw-bold">++@commit.LinesAdded</span>
                                }
                                @if (commit.LinesRemoved > 0)
                                {
                                    <span class="text-danger fw-bold ms-2">--@commit.LinesRemoved</span>
                                }
                            </td>
                            <td><span class="text-success fw-bold">@commit.CodeLinesAdded</span></td>
                            <td><span class="text-danger fw-bold">@commit.CodeLinesRemoved</span></td>
                            <td>
                                @if (commit.IsPRMergeCommit)
                                {
                                    <span class="badge bg-primary me-2">PR</span>
                                }
                                <span>@commit.Message</span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <nav>
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : null)">
                    <button class="page-link" @onclick="async () => await GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
                </li>
                
                @if (currentPage > 3)
                {
                    <li class="page-item">
                        <button class="page-link" @onclick="async () => await GoToPage(1)">1</button>
                    </li>
                    @if (currentPage > 4)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }
                
                @{
                    var startPage = Math.Max(1, currentPage - 2);
                    var endPage = Math.Min(totalPages, currentPage + 2);
                    Console.WriteLine($"Pagination: currentPage={currentPage}, totalPages={totalPages}, showing pages {startPage}-{endPage}");
                }
                @for (int i = startPage; i <= endPage; i++)
                {
                    var pageNum = i; // Capture the loop variable
                    <li class="page-item @(i == currentPage ? "active" : null)">
                        <button class="page-link" @onclick="@(async () => await GoToPageWithLog(pageNum))" @onclick:preventDefault="true">@i</button>
                    </li>
                }
                
                @if (currentPage < totalPages - 2)
                {
                    @if (currentPage < totalPages - 3)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <button class="page-link" @onclick="async () => await GoToPage(totalPages)">@totalPages</button>
                    </li>
                }
                
                <li class="page-item @(currentPage == totalPages ? "disabled" : null)">
                    <button class="page-link" @onclick="async () => await GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">Next</button>
                </li>
            </ul>
            <div class="text-center mt-2">
                <small class="text-muted">Page @currentPage of @totalPages</small>
            </div>
        </nav>
    }
</div>

@code {
    private void SetDateRange(int days)
    {
        endDateString = DateTime.Today.ToString("yyyy-MM-dd");
        startDateString = DateTime.Today.AddDays(-days).ToString("yyyy-MM-dd");
        InvokeAsync(() => OnDateRangeChanged(null));
    }

    private void ClearDateRange()
    {
        startDateString = null;
        endDateString = null;
        InvokeAsync(() => OnDateRangeChanged(null));
    }
} 