@page "/user/{UserId:int}/commits"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using System.Globalization
@using System.Linq
@inject IJSRuntime JS
@inject BB.Web.Services.WorkspaceService WorkspaceService 
@using BB.Api.Endpoints.Analytics
@using BB.Api.Endpoints.Commits 
@using BB.Web.Components.Common 
@rendermode InteractiveServer

<div class="container-fluid mt-4">
    @if (selectedUser != null)
    {
        <div class="card">
            <div class="card-header">
                <h3>Commits by @selectedUser.DisplayName</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <CommitsFilter
                            Repositories="repositories"
                            SelectedRepoSlug="selectedRepoSlug"
                            StartDate="startDateObject"
                            EndDate="endDateObject"
                            IncludePR="includePR"
                            IncludeData="includeData"
                            IncludeConfig="includeConfig"
                            ShowExcluded="showExcluded"
                            OnRepositorySelected="OnRepositorySelected"
                            OnUserSelected="@((int? uId) => Task.CompletedTask)"
                            OnDateRangeUpdated="EventCallback.Factory.Create<(DateTime? newStartDate, DateTime? newEndDate)>(this, OnDateRangeUpdated)"
                            OnFiltersChanged="OnFiltersChanged"
                            OnShowExcludedChanged="OnShowExcludedChanged" />
                    </div>
                </div>

                @if (isLoading)
                {
                    <div class="d-flex justify-content-center mt-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-4">@errorMessage</div>
                }
                else if (commits.Any())
                {
                    <CommitSummary PaginatedCommitsResponse="paginatedCommitsResponse" />
                    <div class="table-responsive mt-4">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Commit</th>
                                    <th>Repository</th>
                                    <th>Date</th>
                                    <th>Lines Added</th>
                                    <th>Lines Removed</th>
                                    <th>Message</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var commit in commits)
                                {
                                    <tr>
                                        <td>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => ShowCommitFilesModal(commit.Hash)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </td>
                                        <td>
                                            <a href="#" @onclick='() => OpenBitbucketPopup(commit.Hash, commit.RepositorySlug)' @onclick:preventDefault>
                                                @commit.Hash.Substring(0, 7)
                                            </a>
                                        </td>
                                        <td>@commit.RepositoryName</td>
                                        <td>@commit.Date.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td class="text-success">@commit.LinesAdded</td>
                                        <td class="text-danger">@commit.LinesRemoved</td>
                                        <td>
                                            <span title="@commit.Message" style="cursor: pointer" @onclick="() => ShowFullMessage(commit.Message)">
                                                @(commit.Message.Length > 50 ? commit.Message.Substring(0, 50) + "..." : commit.Message)
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="d-flex justify-content-center mt-3">
                        <nav>
                            <ul class="pagination">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPageWithLog(currentPage - 1)">Previous</button>
                                </li>
                                @for (var i = 1; i <= totalPages; i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPageWithLog(pageNumber)">@pageNumber</button>
                                    </li>
                                }
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPageWithLog(currentPage + 1)">Next</button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
                else
                {
                    <div class="alert alert-info mt-4">No commits found for this user.</div>
                }
            </div>
        </div>
    }
    else
    {
        <p><em>Loading user data...</em></p>
    }
</div>

@if (showMessageModal)
{
    <div class="modal show" style="display: block; background: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Commit Message</h5>
                    <button type="button" class="btn-close" @onclick="() => showMessageModal = false"></button>
                </div>
                <div class="modal-body">
                    <p style="white-space: pre-wrap;">@selectedMessage</p>
                </div>
            </div>
        </div>
    </div>
}

<CommitFilesModal IsOpen="@showCommitFilesModal" IsOpenChanged="@OnCommitFilesModalChanged" CommitHash="@(selectedCommitHashForModal ?? string.Empty)" />

@code {
    [Parameter]
    public int UserId { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? StartDate { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? EndDate { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? RepoSlug { get; set; }

    private List<CommitListItemDto> commits = new();
    private List<RepositorySummaryDto> repositories = new();
    private UserDto? selectedUser;
    private string? selectedRepoSlug;
    private bool includePR = false;
    private bool includeData = true;
    private bool includeConfig = true;
    private bool showExcluded = false;
    private DateTime? startDateObject;
    private DateTime? endDateObject;
    private PaginatedCommitsResponse? paginatedCommitsResponse;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 25;
    private bool isLoading = true;
    private string? errorMessage;
    private bool showCommitFilesModal = false;
    private string? selectedCommitHashForModal;
    private string? selectedMessage;
    private bool showMessageModal;

    protected override async Task OnParametersSetAsync()
    {
        if (DateTime.TryParse(StartDate, out var sd)) startDateObject = sd;
        else startDateObject = DateTime.Today.AddDays(-7);

        if (DateTime.TryParse(EndDate, out var ed)) endDateObject = ed;
        else endDateObject = DateTime.Today;

        selectedRepoSlug = RepoSlug;
        
        await LoadAllData();
    }

    private async Task LoadAllData()
    {
        isLoading = true;
        await LoadRepositories();
        await LoadUser();
        await LoadCommits();
        isLoading = false;
    }

    private async Task LoadRepositories()
    {
        try
        {
            var allRepositories = await Http.GetFromJsonAsync<RepositorySummaryDto[]>("/api/analytics/repositories");
            repositories = allRepositories?.ToList() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading repositories: {ex.Message}");
        }
    }

    private async Task LoadUser()
    {
        try
        {
            var users = await Http.GetFromJsonAsync<List<UserDto>>("/api/analytics/users") ?? new();
            selectedUser = users.FirstOrDefault(u => u.Id == UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
        }
    }

    private async Task OnRepositorySelected(string? repoSlug)
    {
        selectedRepoSlug = repoSlug == "all" ? null : repoSlug;
        currentPage = 1;
        await LoadCommits();
    }

    private async Task OnDateRangeUpdated((DateTime? newStartDate, DateTime? newEndDate) dateRange)
    {
        startDateObject = dateRange.newStartDate;
        endDateObject = dateRange.newEndDate;
        currentPage = 1;
        await LoadCommits();
    }

    private async Task OnFiltersChanged((bool includePR, bool includeData, bool includeConfig) filters)
    {
        this.includePR = filters.includePR;
        this.includeData = filters.includeData;
        this.includeConfig = filters.includeConfig;
        currentPage = 1;
        await LoadCommits();
    }

    private async Task OnShowExcludedChanged(bool value)
    {
        showExcluded = value;
        await LoadCommits();
    }

    private async Task LoadCommits()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var repoPath = string.IsNullOrEmpty(selectedRepoSlug) ? "all" : selectedRepoSlug;
            var url = $"api/commits/{repoPath}?page={currentPage}&pageSize={pageSize}&includePR={includePR}&userId={UserId}";
            if (startDateObject.HasValue) url += $"&startDate={startDateObject.Value:yyyy-MM-dd}";
            if (endDateObject.HasValue) url += $"&endDate={endDateObject.Value:yyyy-MM-dd}";
            if (showExcluded) url += "&showExcluded=true";

            var response = await Http.GetFromJsonAsync<PaginatedCommitsResponse>(url);
            if (response != null)
            {
                commits = response.Commits;
                totalPages = response.TotalPages;
                paginatedCommitsResponse = response;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading commits: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        await LoadCommits();
    }

    private async Task GoToPageWithLog(int page)
    {
        await GoToPage(page);
    }

    private void OpenBitbucketPopup(string hash, string? repositorySlug = null)
    {
        var owner = WorkspaceService.SelectedWorkspace;
        var targetRepo = repositorySlug ?? selectedRepoSlug;
        
        if (string.IsNullOrEmpty(owner) || string.IsNullOrEmpty(targetRepo)) return;
        
        var url = $"https://bitbucket.org/{owner}/{targetRepo}/commits/{hash}";
        _ = JS.InvokeVoidAsync("window.open", url, "_blank");
    }

    private void ShowCommitFilesModal(string commitHash)
    {
        selectedCommitHashForModal = commitHash;
        showCommitFilesModal = true;
    }

    private async Task OnCommitFilesModalChanged(bool isOpen)
    {
        showCommitFilesModal = isOpen;
        if (!isOpen)
        {
            selectedCommitHashForModal = null;
        }
    }

    private void ShowFullMessage(string message)
    {
        selectedMessage = message;
        showMessageModal = true;
    }
} 