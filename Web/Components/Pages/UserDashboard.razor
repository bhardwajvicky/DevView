@page "/user-dashboard"
@using API.Endpoints.Analytics
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor
@using Web.Services
@using Web.Components.Common
@using System.Linq
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject WorkspaceService WorkspaceService
@rendermode InteractiveServer

<PageTitle>User Dashboard - DevView</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4"><i class="bi bi-speedometer2"></i> User Dashboard</h1>
        </div>
    </div>

    @if (!WorkspaceService.HasSelectedWorkspace)
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Workspace Not Configured</h4>
            <p>Please select a workspace in Settings to view dashboard statistics.</p>
            <hr>
            <button class="btn btn-primary" @onclick="NavigateToSettings">
                <i class="bi bi-gear-fill me-2"></i>Go to Settings
            </button>
        </div>
    }
    else
    {
        <!-- Filters -->
        <div class="row mb-4">
            @if (isLoadingRepos)
            {
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Repository</label>
                        <input type="text" class="form-control" value="Loading repositories..." disabled />
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Repository</label>
                        @if (repositories != null && repositories.Any())
                        {
                            <RadzenDropDown Data="@GetRepositoryOptions()"
                                          TextProperty="Name"
                                          ValueProperty="Slug"
                                          AllowClear="true"
                                          AllowFiltering="true"
                                          FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                          Placeholder="Search repositories..."
                                          Value="@selectedRepoSlug"
                                          Change="@(args => OnRepositoryChanged(args))"
                                          class="w-100" />
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                No repositories found. Please check your configuration.
                            </div>
                        }
                    </div>
                </div>
            }

            <div class="col-md-4">
                <div class="mb-3">
                    <label for="userSelect" class="form-label fw-bold">Select User</label>
                    @if (isLoadingUsers)
                    {
                        <div class="d-flex align-items-center">
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <span>Loading users...</span>
                        </div>
                    }
                    else if (users != null && users.Any())
                    {
                        <RadzenDropDown Data="@users.OrderBy(u => u.DisplayName)"
                                      TextProperty="DisplayName"
                                      ValueProperty="Id"
                                      AllowClear="true"
                                      AllowFiltering="true"
                                      FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                      Placeholder="Search users..."
                                      Value="@selectedUserId"
                                      Change="@(args => OnUserChanged(args))"
                                      class="w-100" />
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            No users found. Please check your configuration.
                        </div>
                    }
                </div>
            </div>

            <!-- Date Range Selection -->
            <div class="col-md-4">
                <div class="mb-3">
                    <label class="form-label fw-bold">Date Range</label>
                    <div class="row g-2">
                        <div class="col-md-6">
                            <RadzenDatePicker @bind-Value="startDate" DateFormat="MM/dd/yyyy" Placeholder="Start Date" 
                                            Change="@(() => OnDateRangeChanged())" class="w-100" />
                        </div>
                        <div class="col-md-6">
                            <RadzenDatePicker @bind-Value="endDate" DateFormat="MM/dd/yyyy" Placeholder="End Date" 
                                            Change="@(() => OnDateRangeChanged())" class="w-100" />
                        </div>
                    </div>
                    <div class="mt-2">
                        <RadzenButton Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Secondary" Text="Last 7 Days" Click="@(() => SetDateRange(7))" class="me-1" />
                        <RadzenButton Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Secondary" Text="Last 30 Days" Click="@(() => SetDateRange(30))" class="me-1" />
                        <RadzenButton Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Secondary" Text="Last 90 Days" Click="@(() => SetDateRange(90))" class="me-1" />
                        <RadzenButton Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Secondary" Text="All Time" Click="@(() => SetDateRange(null))" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters Row -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Filters</h5>
                        <div class="d-flex gap-3">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="includePR" @bind="includePR" @bind:after="OnFilterChanged">
                                <label class="form-check-label" for="includePR">Include PRs</label>
                            </div>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="showExcluded" @bind="showExcluded" @bind:after="OnFilterChanged">
                                <label class="form-check-label" for="showExcluded">Show Excluded</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (isLoading)
    {
        <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
            <div class="d-flex align-items-center">
                <div class="spinner-border spinner-border-sm me-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span>Loading dashboard data...</span>
            </div>
        </RadzenAlert>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else if (dashboardData != null)
    {
        <h3 class="mb-4">Usage Statistics</h3>
        <div class="row">
            <!-- Active Contributing Users -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-start">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-3">Active Contributing Users</h5>
                            <i class="bi bi-people-fill fs-3 text-primary"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            @dashboardData.CurrentPeriod.ActiveContributingUsers
                            @{
                                var userChange = (double)dashboardData.CurrentPeriod.ActiveContributingUsers - dashboardData.PreviousPeriod.ActiveContributingUsers;
                                var userPercentageChange = dashboardData.PreviousPeriod.ActiveContributingUsers > 0
                                    ? (userChange / dashboardData.PreviousPeriod.ActiveContributingUsers) * 100
                                    : 0;
                                var userChangeClass = userPercentageChange >= 0 ? "text-success" : "text-danger";
                                var userChangeIcon = userPercentageChange >= 0 ? "bi-arrow-up" : "bi-arrow-down";
                            }
                            <span class="small @userChangeClass">
                                <i class="bi @userChangeIcon"></i> @userPercentageChange.ToString("F1")%
                            </span>
                        </h2>
                        <p class="text-muted small mb-0">Last period: @dashboardData.PreviousPeriod.ActiveContributingUsers</p>
                        <p class="text-muted small mb-0">@GetDateRangeDisplay()</p>
                    </div>
                </div>
            </div>

            <!-- Total Commits -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-0">Total Commits</h5>
                            <i class="bi bi-git text-info fs-4"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            @dashboardData.CurrentPeriod.TotalCommits
                            @{
                                var commitChange = (double)dashboardData.CurrentPeriod.TotalCommits - dashboardData.PreviousPeriod.TotalCommits;
                                var commitPercentageChange = dashboardData.PreviousPeriod.TotalCommits > 0
                                    ? (commitChange / dashboardData.PreviousPeriod.TotalCommits) * 100
                                    : 0;
                                var commitChangeClass = commitPercentageChange >= 0 ? "text-success" : "text-danger";
                                var commitChangeIcon = commitPercentageChange >= 0 ? "bi-arrow-up" : "bi-arrow-down";
                            }
                            <span class="fs-6 @commitChangeClass">
                                <i class="bi @commitChangeIcon"></i> @commitPercentageChange.ToString("0.0")%
                            </span>
                        </h2>
                        <p class="text-muted small mb-0">Last period: @dashboardData.PreviousPeriod.TotalCommits</p>
                        <p class="text-muted small mb-0">@GetDateRangeDisplay()</p>
                    </div>
                </div>
            </div>

            <!-- Repositories Updated -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-0">Repositories Updated</h5>
                            <i class="bi bi-folder-fill text-warning fs-4"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            @dashboardData.CurrentPeriod.RepositoriesUpdated
                            @{
                                var repoChange = (double)dashboardData.CurrentPeriod.RepositoriesUpdated - dashboardData.PreviousPeriod.RepositoriesUpdated;
                                var repoPercentageChange = dashboardData.PreviousPeriod.RepositoriesUpdated > 0
                                    ? (repoChange / dashboardData.PreviousPeriod.RepositoriesUpdated) * 100
                                    : 0;
                                var repoChangeClass = repoPercentageChange >= 0 ? "text-success" : "text-danger";
                                var repoChangeIcon = repoPercentageChange >= 0 ? "bi-arrow-up" : "bi-arrow-down";
                            }
                            <span class="fs-6 @repoChangeClass">
                                <i class="bi @repoChangeIcon"></i> @repoPercentageChange.ToString("0.0")%
                            </span>
                        </h2>
                        <p class="text-muted small mb-0">Last period: @dashboardData.PreviousPeriod.RepositoriesUpdated</p>
                        <p class="text-muted small mb-0">@GetDateRangeDisplay()</p>
                    </div>
                </div>
            </div>

            <!-- PRs Not Approved and Merged -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-0">PRs Not Approved and Merged</h5>
                            <i class="bi bi-x-circle-fill text-danger fs-4"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            <span class="text-danger">@dashboardData.CurrentPeriod.PrsNotApprovedAndMerged</span>
                        </h2>
                        <p class="text-muted small mb-0">Current Period</p>
                        <p class="text-muted small mb-0">@GetDateRangeDisplay()</p>
                    </div>
                </div>
            </div>

            <!-- Users Count with No Activity -->
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-0">Users with No Activity</h5>
                            <i class="bi bi-person-slash-fill text-warning fs-4"></i>
                        </div>
                        <h2 class="fw-bold mb-3">
                            <span class="text-warning">@dashboardData.UsersWithNoActivity</span>
                        </h2>
                        <p class="text-muted small mb-0">Current Period</p>
                        <p class="text-muted small mb-0">@GetDateRangeDisplay()</p>
                    </div>
                </div>
            </div>
        </div>

        <h3 class="mb-4 mt-4">Detailed Insights</h3>
        <div class="row">
            <!-- PR Average Age Graph -->
            <div class="col-lg-4 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-3">PR Average Age (Open & Merged)</h5>
                        <div class="flex-grow-1">
                            <canvas id="prAgeChart" class="w-100 h-100"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Biggest Contributor Users -->
            <div class="col-lg-4 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-3">Biggest Contributor Users (Commits & Code Lines)</h5>
                        <div class="table-responsive flex-grow-1">
                            <table class="table table-striped table-hover table-sm mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>User</th>
                                        <th>Commits</th>
                                        <th>Code Added</th>
                                        <th>Code Removed</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var contributor in dashboardData.TopContributors)
                                    {
                                        <tr>
                                            <td>@contributor.UserName</td>
                                            <td>@contributor.Commits</td>
                                            <td class="text-success">+@contributor.CodeLinesAdded</td>
                                            <td class="text-danger">-@contributor.CodeLinesRemoved</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Most Approvals by Top 5 Team Members -->
            <div class="col-lg-4 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-3">Most Approvals by Top 5 Team Members</h5>
                        <div class="table-responsive flex-grow-1">
                            <table class="table table-striped table-hover table-sm mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>User</th>
                                        <th>PR Approvals</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var approver in dashboardData.TopApprovers)
                                    {
                                        <tr>
                                            <td>@approver.UserName</td>
                                            <td>@approver.PrApprovalCount</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- PRs Merged by Weekday Chart -->
            <div class="col-lg-4 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body d-flex flex-column">
                        <div class="row align-items-center">
                            <div class="col-6">
                                <h5 class="card-title text-muted text-uppercase fs-6 fw-bold mb-2">PRs Merged</h5>
                                <h2 class="fw-bold mb-1">@dashboardData.CurrentPeriod.TotalMergedPrs</h2>
                                @{
                                    var prChange = (double)dashboardData.CurrentPeriod.TotalMergedPrs - dashboardData.PreviousPeriod.TotalMergedPrs;
                                    var prPercentageChange = dashboardData.PreviousPeriod.TotalMergedPrs > 0
                                        ? (prChange / dashboardData.PreviousPeriod.TotalMergedPrs) * 100
                                        : (dashboardData.CurrentPeriod.TotalMergedPrs > 0 ? 100.0 : 0.0);
                                    var prChangeClass = prPercentageChange >= 0 ? "text-success" : "text-danger";
                                }
                                <p class="small mb-0 @prChangeClass">
                                    <span>@prChange.ToString("+#;-#;0")</span>
                                    (@prPercentageChange.ToString("F1")%)
                                </p>
                            </div>
                            <div class="col-6">
                                <div class="flex-grow-1" style="height: 120px;">
                                    <canvas id="prsMergedByWeekdayChart" class="w-100 h-100"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
</div>

@code {
    private UserDashboardResponseDto? dashboardData;
    private bool isLoading = true;
    private string? errorMessage;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool _chartsRendered = false;

    // Filter-related state variables
    private IEnumerable<RepositorySummaryDto>? repositories;
    private IEnumerable<UserDto>? users;
    private bool isLoadingRepos = true;
    private bool isLoadingUsers = true;
    private string? selectedRepoSlug = "all";
    private int? selectedUserId;
    private bool includePR = false;
    private bool showExcluded = false;

    protected override async Task OnInitializedAsync()
    {
        // Start with "All Time" by default (null dates)
        startDate = null;
        endDate = null;

        if (!WorkspaceService.HasSelectedWorkspace)
        {
            return;
        }

        await LoadRepositories();
        await LoadUsers();
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        errorMessage = null;
        _chartsRendered = false;

        try
        {
            if (!WorkspaceService.HasSelectedWorkspace)
            {
                errorMessage = "No workspace selected. Please configure workspace in Settings.";
                return;
            }

            var url = $"api/userdashboard?workspace={WorkspaceService.SelectedWorkspace}";
            
            // Add date filters only if they have values (handle "All Time" scenario)
            if (startDate.HasValue)
            {
                url += $"&startDate={startDate.Value:yyyy-MM-dd}";
            }
            if (endDate.HasValue)
            {
                url += $"&endDate={endDate.Value:yyyy-MM-dd}";
            }
            
            // Add repository filter if specific repo is selected
            if (!string.IsNullOrEmpty(selectedRepoSlug) && selectedRepoSlug != "all")
            {
                url += $"&repoSlug={selectedRepoSlug}";
            }
            
            // Add user filter if specific user is selected
            if (selectedUserId.HasValue)
            {
                url += $"&userId={selectedUserId.Value}";
            }

            // Add filter parameters that might affect data aggregation
            url += $"&includePR={includePR.ToString().ToLower()}";
            url += $"&showExcluded={showExcluded.ToString().ToLower()}";

            dashboardData = await Http.GetFromJsonAsync<UserDashboardResponseDto>(url);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading dashboard data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadRepositories()
    {
        try
        {
            isLoadingRepos = true;
            repositories = await Http.GetFromJsonAsync<IEnumerable<RepositorySummaryDto>>("api/analytics/repositories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading repositories: {ex.Message}";
        }
        finally
        {
            isLoadingRepos = false;
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoadingUsers = true;
            users = await Http.GetFromJsonAsync<IEnumerable<UserDto>>("api/analytics/users");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
        }
        finally
        {
            isLoadingUsers = false;
        }
    }

    private async Task OnRepositoryChanged(object? value)
    {
        var slug = value?.ToString();
        selectedRepoSlug = slug;
        await LoadDashboardData();
    }

    private async Task OnUserChanged(object? value)
    {
        var userId = value != null ? (int?)Convert.ToInt32(value) : null;
        selectedUserId = userId;
        await LoadDashboardData();
    }

    private async Task OnDateRangeChanged()
    {
        await LoadDashboardData();
    }

    private async Task SetDateRange(int? days)
    {
        if (days.HasValue)
        {
            endDate = DateTime.Today;
            startDate = endDate.Value.AddDays(-days.Value);
        }
        else
        {
            startDate = null;
            endDate = null;
        }
        await LoadDashboardData();
    }

    private IEnumerable<dynamic> GetRepositoryOptions()
    {
        var options = new List<dynamic>();
        
        // Add "All Repositories" option
        options.Add(new { Name = "All Repositories", Slug = "all" });
        
        // Add individual repositories
        if (repositories != null)
        {
            options.AddRange(repositories.OrderBy(r => r.Name).Select(r => new { r.Name, r.Slug }));
        }
        
        return options;
    }

    private void NavigateToSettings()
    {
        Navigation.NavigateTo("/admin/settings");
    }

    private async Task OnFilterChanged()
    {
        await LoadDashboardData();
    }

    private string GetDateRangeDisplay()
    {
        // If both dates are null, it means "All Time" is selected
        if (!startDate.HasValue && !endDate.HasValue)
        {
            return "All Time";
        }
        
        // If only start date is provided
        if (startDate.HasValue && !endDate.HasValue)
        {
            return $"From {startDate.Value:MMM dd, yyyy}";
        }
        
        // If only end date is provided
        if (!startDate.HasValue && endDate.HasValue)
        {
            return $"Until {endDate.Value:MMM dd, yyyy}";
        }
        
        // If both dates are provided
        if (startDate.HasValue && endDate.HasValue)
        {
            // If same year, show shorter format
            if (startDate.Value.Year == endDate.Value.Year)
            {
                return $"{startDate.Value:MMM dd} - {endDate.Value:MMM dd, yyyy}";
            }
            else
            {
                return $"{startDate.Value:MMM dd, yyyy} - {endDate.Value:MMM dd, yyyy}";
            }
        }
        
        return "All Time"; // Fallback
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_chartsRendered && dashboardData != null)
        {
            _chartsRendered = true;

            if (dashboardData.PrAgeGraphData != null)
            {
                await RenderPrAgeChart(dashboardData.PrAgeGraphData);
            }

            if (dashboardData.PrsMergedByWeekdayData?.MergedPrsByWeekday != null)
            {
                await RenderPrsMergedByWeekdayChart(dashboardData.PrsMergedByWeekdayData.MergedPrsByWeekday);
            }
        }
    }

    private async Task RenderPrAgeChart(PrAgeGraph prAgeGraphData)
    {
        await JSRuntime.InvokeVoidAsync("renderPrAgeChart", prAgeGraphData);
    }

    private async Task RenderPrsMergedByWeekdayChart(List<WeekdayPrCount> prsMergedByWeekdayData)
    {
        await JSRuntime.InvokeVoidAsync("renderPrsMergedByWeekdayChart", prsMergedByWeekdayData);
    }
} 