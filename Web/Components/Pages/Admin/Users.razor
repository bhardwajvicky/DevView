@page "/admin/users"
@using System.Net.Http.Json
@inject HttpClient Http
@inject WorkspaceService WorkspaceService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Web.Services

@rendermode InteractiveServer

<PageTitle>Admin - Users - DevView</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    <i class="bi bi-people-fill me-2"></i>
                    Users Management
                </h1>
                <div>
                    <div class="d-flex align-items-center">
                        <span class="me-3">
                            <strong>Workspace:</strong> 
                            <span class="badge bg-primary fs-6">@WorkspaceService.SelectedWorkspace</span>
                        </span>
                        <button class="btn btn-success" @onclick="SyncUsers" disabled="@isSyncing">
                            @if (isSyncing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-arrow-repeat me-2"></i>
                            }
                            Sync Users
                        </button>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(messageType == "success" ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
                </div>
            }

            @if (users == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading users...</p>
                </div>
            }
            else if (!users.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    No users found for workspace <strong>@WorkspaceService.SelectedWorkspace</strong>. Try syncing users first.
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-table me-2"></i>
                            Users (@users.Count()) - Workspace: @WorkspaceService.SelectedWorkspace
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Avatar</th>
                                        <th>Display Name</th>
                                        <th>Bitbucket User ID</th>
                                        <th>Created On</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in users)
                                    {
                                        <tr>
                                            <td>
                                                @if (!string.IsNullOrEmpty(user.AvatarUrl))
                                                {
                                                    <img src="@user.AvatarUrl" alt="Avatar" class="rounded-circle" style="width: 40px; height: 40px;" />
                                                }
                                                else
                                                {
                                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                                        <i class="bi bi-person-fill text-white"></i>
                                                    </div>
                                                }
                                            </td>
                                            <td>
                                                <strong>@user.DisplayName</strong>
                                            </td>
                                            <td>
                                                <code>@user.BitbucketUserId</code>
                                            </td>
                                            <td>
                                                @(user.CreatedOn?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewUserActivity(user)">
                                                    <i class="bi bi-graph-up"></i> Activity
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<UserDto>? users;
    private bool isSyncing = false;
    private string message = "";
    private string messageType = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if workspace is selected, redirect to Settings if not
        if (!WorkspaceService.HasSelectedWorkspace)
        {
            Navigation.NavigateTo("/admin/settings");
            return;
        }
        
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await Http.GetFromJsonAsync<IEnumerable<UserDto>>("http://localhost:5000/api/analytics/users");
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading users: {ex.Message}", "error");
        }
    }

    private async Task SyncUsers()
    {
        if (!WorkspaceService.HasSelectedWorkspace)
        {
            ShowMessage("No workspace selected. Please configure workspace in Settings.", "error");
            return;
        }

        isSyncing = true;
        message = "";

        try
        {
            var response = await Http.PostAsync($"http://localhost:5000/api/sync/users/{WorkspaceService.SelectedWorkspace}", null);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                ShowMessage(responseContent, "success");
                await LoadUsers(); // Refresh the list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowMessage($"Sync failed: {errorContent}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error during sync: {ex.Message}", "error");
        }
        finally
        {
            isSyncing = false;
        }
    }

    private void ShowMessage(string msg, string type)
    {
        message = msg;
        messageType = type;
    }

    private void ViewUserActivity(UserDto user)
    {
        // TODO: Navigate to user activity view or show modal with user stats
        ShowMessage($"User activity view for {user.DisplayName} - Feature coming soon!", "success");
    }
} 