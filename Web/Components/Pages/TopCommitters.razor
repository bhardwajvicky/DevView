@page "/top-committers"
@rendermode InteractiveServer

@using Radzen
@using Radzen.Blazor
@using Web.Services
@using System.Net.Http.Json
@using System.Text.Json
@using System.Linq
@using Web.Components.Common
@using API.Endpoints.Analytics
@inject HttpClient Http
@inject ILogger<TopCommitters> Logger
@inject IJSRuntime JSRuntime
@inject WorkspaceService WorkspaceService
@inject NavigationManager Navigation

<PageTitle>Top/Bottom Committers - DevView</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="bi bi-people"></i> Top/Bottom Committers
            </h1>
        </div>
    </div>

    @if (!WorkspaceService.HasSelectedWorkspace)
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Workspace Not Configured</h4>
            <p>Please select a workspace in Settings to view committer statistics.</p>
            <hr>
            <button class="btn btn-primary" @onclick="NavigateToSettings">
                <i class="bi bi-gear-fill me-2"></i>Go to Settings
            </button>
        </div>
    }
    else
    {
        <!-- Repository Selection -->
        <CommitsFilter 
            IsLoadingRepos="@isLoadingRepos"
            Repositories="@repositories"
            SelectedRepoSlug="@selectedRepoSlug"
            StartDate="@startDate"
            EndDate="@endDate"
            IncludePR="@includePR"
            IncludeData="@includeData"
            IncludeConfig="@includeConfig"
            GroupBy="@groupBy"
            ShowExcluded="@showExcluded"
            OnRepositorySelected="OnRepositorySelected"
            OnDateRangeUpdated="OnDateRangeUpdated"
            OnFiltersChanged="OnFiltersChanged"
            OnGroupingUpdated="OnGroupingUpdated"
            OnShowExcludedChanged="OnShowExcludedChanged" />

        <!-- Error/Info Messages -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert @(errorMessage.StartsWith("Note:") ? "alert-info" : "alert-danger") alert-dismissible fade show" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }

        @if (isLoadingCommitters)
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading committer data...</span>
                </div>
            </RadzenAlert>
        }
        else if (topCommittersData?.TopCommitters != null && topCommittersData.TopCommitters.Any())
        {
            @* Top Committers *@
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                üèÜ Top Committers
                                @if (selectedRepoSlug == "ALL")
                                {
                                    <span class="text-muted">- All Repositories</span>
                                }
                                else if (!string.IsNullOrEmpty(selectedRepoSlug))
                                {
                                    var selectedRepo = repositories?.FirstOrDefault(r => r.Slug == selectedRepoSlug);
                                    <span class="text-muted">- @(selectedRepo?.Name ?? selectedRepoSlug)</span>
                                }
                            </h5>
                            <small class="text-muted">Top contributors by lines of code added</small>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                @foreach (var committer in topCommittersData.TopCommitters)
                                {
                                    var canvasId = $"committerChart_top_{committer.UserId}";
                                    var activityData = string.IsNullOrEmpty(committer.ActivityData) ? new List<API.Endpoints.Analytics.CommitActivityDto>() :
                                        System.Text.Json.JsonSerializer.Deserialize<List<API.Endpoints.Analytics.CommitActivityDto>>(committer.ActivityData) ?? new List<API.Endpoints.Analytics.CommitActivityDto>();

                                    // Apply filters to calculate totals
                                    var filteredActivity = activityData.AsEnumerable();

                                    if (!includePR)
                                    {
                                        filteredActivity = filteredActivity.Where(a => !a.IsMergeCommit);
                                    }
                                    // Removed FileType filtering as it's no longer present on CommitActivityDto

                                    var totalCommits = filteredActivity.Sum(a => a.CommitCount);
                                    var totalLinesAdded = filteredActivity.Sum(a => 
                                        a.CodeLinesAdded 
                                        + (includeData ? a.DataLinesAdded : 0) 
                                        + (includeConfig ? a.ConfigLinesAdded : 0)
                                    );
                                    var totalLinesDeleted = filteredActivity.Sum(a => 
                                        a.CodeLinesRemoved 
                                        + (includeData ? a.DataLinesRemoved : 0) 
                                        + (includeConfig ? a.ConfigLinesRemoved : 0)
                                    );

                                    <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 mb-3">
                                        <ContributorChart 
                                            DisplayName="@committer.DisplayName"
                                            AvatarUrl="@committer.AvatarUrl"
                                            CanvasId="@canvasId"
                                            ActivityData="@activityData"
                                            TotalCommits="@totalCommits"
                                            TotalLinesAdded="@totalLinesAdded"
                                            TotalLinesDeleted="@totalLinesDeleted"
                                            IsTopCommitter="true"
                                            OnChartClick="@(date => HandleContributorChartClick(committer.UserId, date))"
                                            OnNameClick="@(userId => NavigateToUserCommits(userId, committer.DisplayName, null, selectedRepoSlug))"
                                            ContributorUserId="@committer.UserId" />
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @* Bottom Committers *@
            @if (topCommittersData.BottomCommitters != null && topCommittersData.BottomCommitters.Any())
            {
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">
                                    üìä Bottom Committers
                                </h5>
                                <small class="text-muted">Contributors with fewer code changes</small>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    @foreach (var committer in topCommittersData.BottomCommitters ?? new List<API.Endpoints.Analytics.TopCommittersDto>())
                                    {
                                        var canvasId = $"committerChart_bottom_{committer.UserId}";
                                        var activityData = string.IsNullOrEmpty(committer.ActivityData) ? new List<API.Endpoints.Analytics.CommitActivityDto>() :
                                            System.Text.Json.JsonSerializer.Deserialize<List<API.Endpoints.Analytics.CommitActivityDto>>(committer.ActivityData) ?? new List<API.Endpoints.Analytics.CommitActivityDto>();

                                        // Apply filters to calculate totals
                                        var filteredActivity = activityData.AsEnumerable();

                                        if (!includePR)
                                        {
                                            filteredActivity = filteredActivity.Where(a => !a.IsMergeCommit);
                                        }
                                        // Removed FileType filtering as it's no longer present on CommitActivityDto

                                        var totalCommits = filteredActivity.Sum(a => a.CommitCount);
                                        var totalLinesAdded = filteredActivity.Sum(a => 
                                            a.CodeLinesAdded 
                                            + (includeData ? a.DataLinesAdded : 0) 
                                            + (includeConfig ? a.ConfigLinesAdded : 0)
                                        );
                                        var totalLinesDeleted = filteredActivity.Sum(a => 
                                            a.CodeLinesRemoved 
                                            + (includeData ? a.DataLinesRemoved : 0) 
                                            + (includeConfig ? a.ConfigLinesRemoved : 0)
                                        );

                                        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 mb-3">
                                            <ContributorChart 
                                                DisplayName="@committer.DisplayName"
                                                AvatarUrl="@committer.AvatarUrl"
                                                CanvasId="@canvasId"
                                                ActivityData="@activityData"
                                                TotalCommits="@totalCommits"
                                                TotalLinesAdded="@totalLinesAdded"
                                                TotalLinesDeleted="@totalLinesDeleted"
                                                IsTopCommitter="false"
                                                OnChartClick="@(date => HandleContributorChartClick(committer.UserId, date))"
                                                OnNameClick="@(userId => NavigateToUserCommits(userId, committer.DisplayName, null, selectedRepoSlug))"
                                                ContributorUserId="@committer.UserId" />
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    private IEnumerable<API.Endpoints.Analytics.RepositorySummaryDto>? repositories;
    private API.Endpoints.Analytics.TopCommittersResponseDto? topCommittersData;
    private bool isLoadingRepos = false;
    private bool isLoadingCommitters = false;
    private string? errorMessage;
    private string? selectedRepoSlug;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool includePR = false;
    private bool includeData = false;
    private bool includeConfig = false;
    private bool showExcluded = false;
    private string groupBy = "Day";
    private string selectedGrouping = "Day";
    private DotNetObjectReference<TopCommitters>? _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        endDate = DateTime.Now;
        startDate = endDate.Value.AddDays(-7);

        try
        {
            // Instead of redirecting, just show a message if no workspace is selected
            if (!WorkspaceService.HasSelectedWorkspace)
            {
                errorMessage = "No workspace selected. Please configure workspace in Settings first.";
                return;
            }

            await LoadRepositories();
            if (repositories != null && repositories.Any())
            {
                selectedRepoSlug = "ALL";
                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing page: {Message}", ex.Message);
            errorMessage = $"Error initializing page: {ex.Message}";
        }
    }

    // Add a method to handle settings navigation
    private void NavigateToSettings()
    {
        Navigation.NavigateTo("/admin/settings");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setTopCommittersDotNetRef", _dotNetRef);
            await JSRuntime.InvokeVoidAsync("eval", $"window.selectedGrouping = '{selectedGrouping}';");
            await JSRuntime.InvokeVoidAsync("eval", $"window.includeData = {includeData.ToString().ToLower()};");
            await JSRuntime.InvokeVoidAsync("eval", $"window.includeConfig = {includeConfig.ToString().ToLower()};");
            await JSRuntime.InvokeVoidAsync("eval", $"window.showExcluded = {showExcluded.ToString().ToLower()};");
        }
    }

    private async Task LoadRepositories()
    {
        try
        {
            isLoadingRepos = true;
            var allRepositories = await Http.GetFromJsonAsync<API.Endpoints.Analytics.RepositorySummaryDto[]>("/api/analytics/repositories");
            
            if (allRepositories != null && allRepositories.Any())
            {
                repositories = allRepositories;
            }
            else
            {
                repositories = Array.Empty<API.Endpoints.Analytics.RepositorySummaryDto>();
            }
        }
        catch (Exception ex)
        {
            _ = ex; // Suppress unused variable warning
            errorMessage = $"Error loading repositories: {ex.Message}";
        }
        finally
        {
            isLoadingRepos = false;
        }
    }

    private async Task OnRepositorySelected(string repoSlug)
    {
        selectedRepoSlug = repoSlug;
        
        await JSRuntime.InvokeVoidAsync("eval", $"window.selectedRepoSlug = '{selectedRepoSlug}';");
        await JSRuntime.InvokeVoidAsync("eval", $"window.selectedGrouping = '{selectedGrouping}';");
        await JSRuntime.InvokeVoidAsync("eval", $"window.includeData = {includeData.ToString().ToLower()};");
        await JSRuntime.InvokeVoidAsync("eval", $"window.includeConfig = {includeConfig.ToString().ToLower()};");
        await JSRuntime.InvokeVoidAsync("eval", $"window.showExcluded = {showExcluded.ToString().ToLower()};");
        
        await RefreshData();
    }

    private async Task OnDateRangeUpdated((DateTime? start, DateTime? end) range)
    {
        startDate = range.start;
        endDate = range.end;
        await RefreshData();
    }

    private async Task OnGroupingUpdated(string grouping)
    {
        selectedGrouping = grouping;
        await RefreshData();
    }

    private async Task OnFiltersChanged((bool includePR, bool includeData, bool includeConfig) filters)
    {
        this.includePR = filters.includePR;
        this.includeData = filters.includeData;
        this.includeConfig = filters.includeConfig;
        // Removed redundant JS interop calls for window.includeData and window.includeConfig
        await RefreshData();
    }

    private async Task OnShowExcludedChanged(bool excluded)
    {
        showExcluded = excluded;
        await RefreshData();
    }

    private async Task RefreshData()
    {
        if (!string.IsNullOrEmpty(selectedRepoSlug) && WorkspaceService.HasSelectedWorkspace)
        {
            var repoForApi = selectedRepoSlug == "ALL" ? null : selectedRepoSlug;
            await LoadTopCommittersData(repoForApi, WorkspaceService.SelectedWorkspace!);
            StateHasChanged();
        }
        else
        {
            topCommittersData = null;
            StateHasChanged();
        }
    }

    private async Task LoadTopCommittersData(string? repoSlug, string workspace)
    {
        try
        {
            if (string.IsNullOrEmpty(workspace))
            {
                errorMessage = "No workspace selected. Please configure workspace in Settings.";
                Logger.LogWarning("LoadTopCommittersData: No workspace provided");
                return;
            }

            Logger.LogInformation("LoadTopCommittersData started for: {RepoSlug}, workspace: {Workspace}", repoSlug ?? "ALL", workspace);
            
            isLoadingCommitters = true;
            errorMessage = null;
            StateHasChanged();
            
            string url;
            if (string.IsNullOrEmpty(repoSlug))
            {
                url = $"/api/analytics/contributors/top-bottom?workspace={workspace}&includePR={includePR.ToString().ToLower()}&includeData={includeData.ToString().ToLower()}&includeConfig={includeConfig.ToString().ToLower()}&showExcluded={showExcluded.ToString().ToLower()}&topCount=6&bottomCount=6";
            }
            else
            {
                url = $"/api/analytics/contributors/top-bottom?repoSlug={repoSlug}&workspace={workspace}&includePR={includePR.ToString().ToLower()}&includeData={includeData.ToString().ToLower()}&includeConfig={includeConfig.ToString().ToLower()}&showExcluded={showExcluded.ToString().ToLower()}&topCount=6&bottomCount=6";
            }

            // Add date range parameters if specified
            if (startDate.HasValue)
            {
                url += $"&startDate={startDate.Value:yyyy-MM-dd}";
            }
            if (endDate.HasValue)
            {
                url += $"&endDate={endDate.Value:yyyy-MM-dd}";
            }

            Logger.LogInformation("Making API call to: {Url}", url);
            
            topCommittersData = await Http.GetFromJsonAsync<API.Endpoints.Analytics.TopCommittersResponseDto>(url);
            
            // Removed conditional message for "Only one developer found"

            if (topCommittersData != null && 
                ((topCommittersData.TopCommitters != null && topCommittersData.TopCommitters.Any()) ||
                 (topCommittersData.BottomCommitters != null && topCommittersData.BottomCommitters.Any())))
            {
                // Don't initialize charts here - let OnAfterRenderAsync handle it after DOM is rendered
            }
            else
            {
                errorMessage = "No committer data found for the selected criteria.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading committer data: {Message}", ex.Message);
            errorMessage = $"Error loading committer data: {ex.Message}";
            topCommittersData = null;
        }
        finally
        {
            isLoadingCommitters = false;
            StateHasChanged();
        }
    }

    private void NavigateToUserCommits(int userId, string userName, DateTime? commitDate, string? repoSlug)
    {
        var url = $"/user/{userId}/commits";
        var queryParams = new List<string>();
        
        if (commitDate.HasValue)
        {
            queryParams.Add($"CommitDate={commitDate.Value:yyyy-MM-dd}");
        }
        
        // Only add repository slug if it's not "ALL"
        if (!string.IsNullOrEmpty(repoSlug) && repoSlug != "ALL")
        {
            queryParams.Add($"RepoSlug={Uri.EscapeDataString(repoSlug)}");
        }
        
        if (queryParams.Any())
        {
            url += "?" + string.Join("&", queryParams);
        }
        
        Navigation.NavigateTo(url);
    }

    private string GetCommitterChartId(TopCommittersDto committer, bool isTop)
    {
        return isTop ? $"committerChart_top_{committer.UserId}" : $"committerChart_bottom_{committer.UserId}";
    }

    private async Task ToggleCommitterDatasetJs(string canvasId, int datasetIndex)
    {
        await JSRuntime.InvokeVoidAsync("toggleCommitterDataset", canvasId, datasetIndex);
    }

    private void HandleContributorChartClick(int userId, DateTime date)
    {
        var user = topCommittersData?.TopCommitters.FirstOrDefault(c => c.UserId == userId) ?? 
                   topCommittersData?.BottomCommitters.FirstOrDefault(c => c.UserId == userId);
        if (user != null)
        {
            NavigateToUserCommits(userId, user.DisplayName, date, selectedRepoSlug);
        }
    }
} 